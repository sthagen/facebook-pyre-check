(self.webpackChunk=self.webpackChunk||[]).push([[576],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=p(n),h=i,y=c["".concat(l,".").concat(h)]||c[h]||d[h]||o;return n?a.createElement(y,s(s({ref:t},u),{},{components:n})):a.createElement(y,s({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=c;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3041:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>r,metadata:()=>l,toc:()=>p,default:()=>d});var a=n(2122),i=n(9756),o=(n(7294),n(3905)),s=["components"],r={id:"pysa-tips",title:"General Tips",sidebar_label:"General Tips"},l={unversionedId:"pysa-tips",id:"pysa-tips",isDocsHomePage:!1,title:"General Tips",description:"Features/Limitations",source:"@site/docs/pysa_tips.md",sourceDirName:".",slug:"/pysa-tips",permalink:"/docs/pysa-tips",editUrl:"https://github.com/facebook/pyre-check/tree/master/documentation/website/docs/pysa_tips.md",version:"current",sidebar_label:"General Tips",frontMatter:{id:"pysa-tips",title:"General Tips",sidebar_label:"General Tips"},sidebar:"pysa",previous:{title:"Coverage Increasing Strategies",permalink:"/docs/pysa-coverage"},next:{title:"Static Analysis Post Processor",permalink:"/docs/static-analysis-post-processor"}},p=[{value:"Features/Limitations",id:"featureslimitations",children:[{value:"Inheritance",id:"inheritance",children:[]},{value:"Stubs",id:"stubs",children:[]}]},{value:"Helpful Python knowledge",id:"helpful-python-knowledge",children:[]},{value:"Debugging Tools",id:"debugging-tools",children:[{value:"<code>pyre_dump()</code>",id:"pyre_dump",children:[]},{value:"<code>reveal_type(YOUR_VARIABLE)</code>",id:"reveal_typeyour_variable",children:[]},{value:"<code>reveal_taint(YOUR_VARIABLE)</code>",id:"reveal_taintyour_variable",children:[]},{value:"<code>results.json</code>",id:"resultsjson",children:[]},{value:"<code>sapp</code>",id:"sapp",children:[]}]},{value:"Developer Quality-of-Life",id:"developer-quality-of-life",children:[{value:"Iterating quickly with Pysa",id:"iterating-quickly-with-pysa",children:[]},{value:"File Types",id:"file-types",children:[]}]},{value:"Usage Examples",id:"usage-examples",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"featureslimitations"},"Features/Limitations"),(0,o.kt)("h3",{id:"inheritance"},"Inheritance"),(0,o.kt)("p",null,"Pysa is aware of inheritance, so you can add taint annotations to a base class,\nand Pysa will detect when the tainted attribute or function is accessed via a\nchild class. For example, this flow will be detected during static analysis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Parent:\n    def some_source(self): # Annotated as a source\n        pass\n\nclass Child(Parent):\n    pass\n\nchild = Child()\nsome_sink(child.some_source()) # Detected as a tainted flow\n")),(0,o.kt)("p",null,"Additionally, Pysa is aware that child classes can be used anywhere a parent\nclasses's type is present. If you access a method on a parent class and the\nimplementation on any child class returns taint, Pysa will detect that and\ntreat the return from the parent class as tainted. For example, this will be\ndetected as a tainted flow during static analysis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Parent:\n    def some_fn(self):\n        """Benign function with no annotations"""\n        pass\n\nclass Child(Parent):\n    def some_fn(self):\n        """Function returning a tainted value"""\n        return get_some_tainted_value()\n\ndef fn(obj: Parent):\n    some_sink(obj.some_fn()) # Detected as a tainted flow\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"A huge caveat here is that Pysa needs to be aware of these inheritance\nrelationships and function definitions for it to work.")," Code that lives\noutside the repo under analysis might not be visible to Pysa, so these\ninheritances/implementations may be missed. See the Stubs section below for\nmore details."),(0,o.kt)("h3",{id:"stubs"},"Stubs"),(0,o.kt)("p",null,"The concept of stubs is covered in general ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"/docs/pysa-basics"},"here")),", but this\nsection in particular will cover specific issues you may encounter with\n",(0,o.kt)("inlineCode",{parentName:"p"},".pyi")," stubs. These stubs can be used to prevent pyre errors for types\nthat live outside the codebase you are running Pysa on. The simplest stubs are\njust empty files in the root of the ",(0,o.kt)("inlineCode",{parentName:"p"},"stubs")," directory (assuming you have a\n",(0,o.kt)("inlineCode",{parentName:"p"},"stubs")," directory specified in the ",(0,o.kt)("inlineCode",{parentName:"p"},"search_path")," list in your\n",(0,o.kt)("inlineCode",{parentName:"p"},".pyre_configuration")," file). An empty stub basically prevents all type checking\nerrors within the namespace of that stub. So for ",(0,o.kt)("inlineCode",{parentName:"p"},"uwsgi.pyi"),", in the ",(0,o.kt)("inlineCode",{parentName:"p"},"stubs"),"\ndirectory, the following code would not raise pyre errors (though it would\nobviously fail to run):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import uwsgi\nfrom uwsgi import asdf, ZXCV\nuwsgi.qwer()\nvariable = ZXCV()\nvariable.hjkl()\n")),(0,o.kt)("p",null,"If you want to be able to create ",(0,o.kt)("inlineCode",{parentName:"p"},".pysa")," models (i.e. annotate sources, sinks,\netc.) for something that is outside your codebase, such as Django's\n",(0,o.kt)("inlineCode",{parentName:"p"},"django.http.request.HttpRequest")," object, you need more than just an empty stub\nfile. You need a directory structure and ",(0,o.kt)("inlineCode",{parentName:"p"},".pyi")," file that matches your import,\nsuch as ",(0,o.kt)("inlineCode",{parentName:"p"},"stubs/django/http/request.pyi"),". Within that ",(0,o.kt)("inlineCode",{parentName:"p"},".pyi")," file, you\nthen need a stub of the class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class HttpRequest(BinaryIO):\n    def __init__(self) -> None: ...\n    COOKIES: Any = ...\n    GET: QueryDict = ...\n    # And a bunch more stuff...\n")),(0,o.kt)("p",null,"Only at this point can you add ",(0,o.kt)("inlineCode",{parentName:"p"},".pysa")," files with annotations such as these:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"django.http.request.HttpRequest.COOKIES: TaintSource[UserControlled]\ndjango.http.request.HttpRequest.GET: TaintSource[UserControlled]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"There is a huge gotcha here"),": If you had both an empty ",(0,o.kt)("inlineCode",{parentName:"p"},"stubs/django.pyi"),"\nfile, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"stubs/django/http/request.pyi")," file shown above, pyre will see\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"django.pyi")," file first and ignore the ",(0,o.kt)("inlineCode",{parentName:"p"},"request.pyi")," file (following\n",(0,o.kt)("a",{parentName:"p",href:"https://www.python.org/dev/peps/pep-0484/#stub-files"},"PEP 484"),"). This would\nmean that your stub of ",(0,o.kt)("inlineCode",{parentName:"p"},"HttpRequest")," would be missed, and your\n",(0,o.kt)("inlineCode",{parentName:"p"},"HttpRequest.COOKIES")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"HttpRequest.GET")," annotations would cause errors when\nrunning Pysa. The fix is simply to delete the ",(0,o.kt)("inlineCode",{parentName:"p"},"django.pyi")," file. When deleting\nthat file, you may all of a sudden see new typing errors for other types within\nDjango, for which you'll need to add new .",(0,o.kt)("inlineCode",{parentName:"p"},"pyi")," files at the appropriate\nlocations."),(0,o.kt)("p",null,"Since definitions in type stubs don't have bodies, all functions and methods\nwill be treated as ",(0,o.kt)("a",{parentName:"p",href:"/docs/pysa-advanced#obscure-models"},"obscure models"),". If this\nleads to false positives, you will want to write a model for it."),(0,o.kt)("h2",{id:"helpful-python-knowledge"},"Helpful Python knowledge"),(0,o.kt)("p",null,"Pretty much all python operators are reduced down to double underbar functions.\nFor example, constructing an object results in a call to ",(0,o.kt)("inlineCode",{parentName:"p"},"__init__(self, ...)"),"\nand an asterisk operator results in a call to ",(0,o.kt)("inlineCode",{parentName:"p"},"__mul__(a, b)"),". A full list of\nthese operators can be found\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3.7/library/operator.html"},"here"),". This is useful to\nknow when you need to add annotations to the usage of operators, such as the use\nof square brackets to access a dictionary."),(0,o.kt)("h2",{id:"debugging-tools"},"Debugging Tools"),(0,o.kt)("h3",{id:"pyre_dump"},(0,o.kt)("inlineCode",{parentName:"h3"},"pyre_dump()")),(0,o.kt)("p",null,"You can insert a call to the (non-existent) ",(0,o.kt)("inlineCode",{parentName:"p"},"pyre_dump()")," function in your code\nto trigger to pyre to output a ton of metadata about it's current state when it\nparses the that function call. This can be useful as a starting point to figure\nout why something is/isn't happening. This will produce ",(0,o.kt)("em",{parentName:"p"},"very")," verbose output."),(0,o.kt)("h3",{id:"reveal_typeyour_variable"},(0,o.kt)("inlineCode",{parentName:"h3"},"reveal_type(YOUR_VARIABLE)")),(0,o.kt)("p",null,"If you only want to check what pyre knows about the types of variables, inject a\ncall to ",(0,o.kt)("inlineCode",{parentName:"p"},"reveal_type(YOUR_VARIABLE)")," (no import needed) in your code. Running\nPyre on your code will then give you compact output indicating what Pyre thinks\nthe type of your variable is."),(0,o.kt)("h3",{id:"reveal_taintyour_variable"},(0,o.kt)("inlineCode",{parentName:"h3"},"reveal_taint(YOUR_VARIABLE)")),(0,o.kt)("p",null,"Similarly to ",(0,o.kt)("inlineCode",{parentName:"p"},"reveal_type"),", if you only want to check what pyre knows about the\ntaint on variables, inject a call to ",(0,o.kt)("inlineCode",{parentName:"p"},"reveal_taint(YOUR_VARIABLE)")," (no import\nneeded) in your code. Running Pysa on your code will then give you compact\noutput indicating what taint Pysa has discovered. Note that each time Pysa\nanalyzes the function (which could be many times) it will update it's\nunderstanding of the taint flowing into the function and output the current\nstate. The final output will be the most complete."),(0,o.kt)("h3",{id:"resultsjson"},(0,o.kt)("inlineCode",{parentName:"h3"},"results.json")),(0,o.kt)("p",null,"Another strategy for getting a bit more metadata is adding a function into your\ncode, which simply constructs and returns the type you want to examine. You can\nthen run Pysa, and grep for the function's name in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"results.json")," file located wherever you pointed ",(0,o.kt)("inlineCode",{parentName:"p"},"--save-results-to=")," to when\nrunning Pysa. You should then be able to see if that function is detected as\nreturning taint, plus a bit more metadata about it."),(0,o.kt)("h3",{id:"sapp"},(0,o.kt)("inlineCode",{parentName:"h3"},"sapp")),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/docs/static-analysis-post-processor"},"Static Analysis Post Processor (SAPP)"),"\nhas access to the same information as ",(0,o.kt)("inlineCode",{parentName:"p"},"results.json"),". While SAPP doesn't display\nall the information ",(0,o.kt)("inlineCode",{parentName:"p"},"results.json")," contains, it can display the information in a\nmore user-friendly gdb-style way. It's especially useful for exploring flows\nwhich pass through many frames."),(0,o.kt)("h2",{id:"developer-quality-of-life"},"Developer Quality-of-Life"),(0,o.kt)("h3",{id:"iterating-quickly-with-pysa"},"Iterating quickly with Pysa"),(0,o.kt)("p",null,"On large projects, Pysa can take a long time to run; it takes about an hour to\nrun on Instagram, which contains millions of lines of Python code. A few tricks\nto iterate more quickly with Pysa are:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Run in a sample project or test environment.")," Pysa runs much more quickly\non smaller projects, so if you need to test something that isn't specific to\nyour environment (eg. a model that corresponds to code in typeshed) then do\nyour testing in a smaller codebase. Even if you are iterating on something\nspecific to your codebase, it can sometimes be worthwhile to port the code\nsnippet you're working on into a test project.",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"The stub integration tests will validate any stubs in ",(0,o.kt)("inlineCode",{parentName:"li"},"tools/pyre/taint"),",\nand this can be a fast shortcut for validating new stubs you want to\nwrite. These tests reside in ",(0,o.kt)("inlineCode",{parentName:"li"},"stubs/integration_test")," and can be invoked\nby running ",(0,o.kt)("inlineCode",{parentName:"li"},"make stubs_integration_test")," in the root of the repo."),(0,o.kt)("li",{parentName:"ol"},"The interprocedural analysis tests dump information about models, issues,\nthe call graph, and overrides. It can be very helpful to test code in this\nenvironment if you need a detailed understanding of Pysa's internal state\nto debug a false positive or negative. Note that these tests do not have\naccess to typeshed or any other type stubs. These tests reside in\n",(0,o.kt)("inlineCode",{parentName:"li"},"interprocedural_analyses/taint/test/integration")," and can be invoked by\nrunning ",(0,o.kt)("inlineCode",{parentName:"li"},"make test")," in the root of the repo."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Skip analysis entirely if you only need to validate taint models"),". ",(0,o.kt)("inlineCode",{parentName:"li"},"pyre\nvalidate-models")," can be used to validate taint models without having to run\nthe entire analysis."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Filter runs with ",(0,o.kt)("inlineCode",{parentName:"strong"},"--rule ####"),".")," This option will cause Pysa to ignore\nsources and sinks that are not involved in the given rule, saving on analysis\ntime. Eg. ",(0,o.kt)("inlineCode",{parentName:"li"},"pyre analyze --rule 5000")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Parallelize across machines.")," If working in a could hosted environment,\nreserving a second machine and working on two projects in parallel can be\neffective. As Pysa is running on one machine, you can switch to the other,\nmake changes there, kick off a run, and then switch back to the first to look\nat results."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Put in all debug statements up front.")," When using the debugging tools\noutlined above, put in way more debug statments than you think you need,\ndumping type info and taint for anything remotely related to the flow you're\nlooking at. This will reduce the odds that you need to do a second run to\nfigure out what's going wrong."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Enable the ",(0,o.kt)("inlineCode",{parentName:"strong"},"--use-cache")," flag.")," All Pysa runs require some information\nfrom Pyre, such as the typechecking environment, dependencies, etc.\nComputing this information can be time-consuming on larger projects.\nHowever, if you're only editing taint models and not the project source,\nthis information isn't expected to change between Pysa runs. By enabling\nthis flag, you can tell Pysa to save this information to cache files\n(located in .pyre/.pysa_cache) and load from cache in subsequent runs,\nrather than computing it from scratch each time. The cache will be\ninvalidated if any of the project source files change, in which case\nPysa will fall back to doing a clean run and then saving the computed\nartifacts in new cache files.")),(0,o.kt)("h3",{id:"file-types"},"File Types"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"taint.config")," is a JSON file and ",(0,o.kt)("inlineCode",{parentName:"p"},".pysa")," files use Python syntax. If you update\nyour editor to recognize those files as JSON and Python respectively, it'll make\ndevelopment easier."),(0,o.kt)("h2",{id:"usage-examples"},"Usage Examples"),(0,o.kt)("p",null,"Not all Pysa features will be covered in these docs, and provided examples won't\nalways be complete. Every feature, however, ",(0,o.kt)("em",{parentName:"p"},"will")," be covered in the tests\nlocated\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/pyre-check/tree/master/interprocedural_analyses/taint/test/integration"},"here"),".\nThese tests can be a useful resource to discover how to use Pysa features."))}d.isMDXComponent=!0}}]);