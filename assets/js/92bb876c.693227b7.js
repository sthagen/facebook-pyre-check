(self.webpackChunk=self.webpackChunk||[]).push([[347],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(y,i(i({ref:t},s),{},{components:n})):r.createElement(y,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2516:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>c,metadata:()=>s,toc:()=>u,default:()=>y});var r,a=n(2122),o=n(9756),i=(n(7294),n(3905)),p=n(4256),l=["components"],c={id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},s={unversionedId:"getting-started",id:"getting-started",isDocsHomePage:!1,title:"Getting Started",description:"Welcome to the wonderful world of static typing! This guide will get you from zero to a simple project that is type checked with Pyre.",source:"@site/docs/getting_started.md",sourceDirName:".",slug:"/getting-started",permalink:"/docs/getting-started",editUrl:"https://github.com/facebook/pyre-check/tree/master/documentation/website/docs/getting_started.md",version:"current",sidebar_label:"Getting Started",frontMatter:{id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},sidebar:"pyre",next:{title:"Installation",permalink:"/docs/installation"}},u=[{value:"Requirements",id:"requirements",children:[]},{value:"Setting up a Project",id:"setting-up-a-project",children:[]},{value:"Running Pyre",id:"running-pyre",children:[]}],d=(r="FbGettingStarted",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),m={toc:u};function y(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(p.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,i.kt)(d,{mdxType:"FbGettingStarted"})),(0,i.kt)(p.OssOnly,{mdxType:"OssOnly"},(0,i.kt)("p",null,"Welcome to the wonderful world of static typing! This guide will get you from zero to a simple project that is type checked with Pyre."),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,"To get started, you need ",(0,i.kt)("a",{parentName:"p",href:"https://www.python.org/getit/"},"Python 3.6 or later")," and ",(0,i.kt)("a",{parentName:"p",href:"https://facebook.github.io/watchman/"},"watchman")," working on your system. On ",(0,i.kt)("em",{parentName:"p"},"MacOS")," you can get everything with ",(0,i.kt)("a",{parentName:"p",href:"https://brew.sh/"},"homebrew"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ brew install python3 watchman\n")),(0,i.kt)("p",null,"On ",(0,i.kt)("em",{parentName:"p"},"Ubuntu"),", ",(0,i.kt)("em",{parentName:"p"},"Mint"),", or ",(0,i.kt)("em",{parentName:"p"},"Debian"),"; use ",(0,i.kt)("inlineCode",{parentName:"p"},"apt-get")," and ",(0,i.kt)("a",{parentName:"p",href:"https://brew.sh/"},"homebrew"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo apt-get install python3 python3-pip python3-venv\n$ brew install watchman\n")),(0,i.kt)("p",null,"We tested Pyre on ",(0,i.kt)("em",{parentName:"p"},"Ubuntu 18.04.5 LTS"),", ",(0,i.kt)("em",{parentName:"p"},"CentOS 7"),", as well as ",(0,i.kt)("em",{parentName:"p"},"OSX 10.11")," and later."),(0,i.kt)("h2",{id:"setting-up-a-project"},"Setting up a Project"),(0,i.kt)("p",null,"We start by creating an empty project directory and setting up a virtual environment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ mkdir my_project && cd my_project\n$ python3 -m venv ~/.venvs/venv\n$ source ~/.venvs/venv/bin/activate\n(venv) $ pip install pyre-check\n")),(0,i.kt)("p",null,"Next, we teach Pyre about our new project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"(venv) $ pyre init\n")),(0,i.kt)("p",null,"This command will set up a configuration for Pyre (",(0,i.kt)("inlineCode",{parentName:"p"},".pyre_configuration"),") as well as watchman (",(0,i.kt)("inlineCode",{parentName:"p"},".watchmanconfig"),") in your project's directory. Accept the defaults for now \u2013 you can change them later if necessary."),(0,i.kt)("h2",{id:"running-pyre"},"Running Pyre"),(0,i.kt)("p",null,"We are now ready to run Pyre:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"(venv) $ echo \"i: int = 'string'\" > test.py\n(venv) $ pyre\n \u019b Found 1 type error!\ntest.py:1:0 Incompatible variable type [9]: i is declared to have type `int` but is used as type `str`.\n")),(0,i.kt)("p",null,"This first invocation will start a daemon listening for filesystem changes \u2013\xa0type checking your project incrementally as you make edits to the code. You will notice that subsequent invocations of ",(0,i.kt)("inlineCode",{parentName:"p"},"pyre")," will be faster than the first one.")))}y.isMDXComponent=!0}}]);