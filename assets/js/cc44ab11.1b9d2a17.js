(self.webpackChunk=self.webpackChunk||[]).push([[445],{3905:(e,n,t)=>{"use strict";t.d(n,{Zo:()=>d,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(t),m=r,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return t?o.createElement(h,a(a({ref:n},d),{},{components:t})):o.createElement(h,a({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4612:(e,n,t)=>{"use strict";t.r(n),t.d(n,{frontMatter:()=>s,metadata:()=>d,toc:()=>u,default:()=>h});var o,r=t(2122),i=t(9756),a=(t(7294),t(3905)),c=t(4256),l=["components"],s={id:"code-5001-public",title:"5001 - Code Injection",sidebar_label:"5001 - Code Injection"},d={unversionedId:"warning_codes/code-5001-public",id:"warning_codes/code-5001-public",isDocsHomePage:!1,title:"5001 - Code Injection",description:"TL;DR",source:"@site/docs/warning_codes/5001.md",sourceDirName:"warning_codes",slug:"/warning_codes/code-5001-public",permalink:"/docs/warning_codes/code-5001-public",editUrl:"https://github.com/facebook/pyre-check/tree/master/documentation/website/docs/warning_codes/5001.md",version:"current",sidebar_label:"5001 - Code Injection",frontMatter:{id:"code-5001-public",title:"5001 - Code Injection",sidebar_label:"5001 - Code Injection"},sidebar:"pysa",previous:{title:"Overview",permalink:"/docs/warning_codes/overview-public"},next:{title:"6065 - Commandline arguments injection",permalink:"/docs/warning_codes/code-6065-public"}},u=[{value:"TL;DR",id:"tldr",children:[]},{value:"RCE via Code Injection (eval/exec)",id:"rce-via-code-injection-evalexec",children:[{value:"ISSUE",id:"issue",children:[]},{value:"EXAMPLE",id:"example",children:[]},{value:"RECOMMENDED SOLUTION",id:"recommended-solution",children:[]}]},{value:"RCE via Command Injection (os.system)",id:"rce-via-command-injection-ossystem",children:[{value:"ISSUE",id:"issue-1",children:[]},{value:"EXAMPLE",id:"example-1",children:[]},{value:"RECOMMENDED SOLUTION",id:"recommended-solution-1",children:[]}]}],p=(o="Fb5001Solution",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)}),m={toc:u};function h(e){var n=e.components,t=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"tldr"},"TL;DR"),(0,a.kt)("p",null,"This category indicates that user-controlled input flows into a sink that allows code or shell command execution. This directly leads to Remote Code Execution which can be assumed to mean complete compromise of the server."),(0,a.kt)("h2",{id:"rce-via-code-injection-evalexec"},"RCE via Code Injection (eval/exec)"),(0,a.kt)("h3",{id:"issue"},"ISSUE"),(0,a.kt)("p",null,"The simplest kind of RCE involves user input flowing into a function such as eval or exec which are intended to interpret or run python code."),(0,a.kt)("h3",{id:"example"},"EXAMPLE"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def update_search_account_filtering(request: HttpRequest) -> HttpResponse:\n    ...\n    if action in ["delete", "add", "update"]:\n        ...\n        filter_by_username = eval(request.POST.get("filter_by_username", "True"))\n')),(0,a.kt)("h3",{id:"recommended-solution"},"RECOMMENDED SOLUTION"),(0,a.kt)("p",null,"There are few reasons to use these functions, and even fewer reasons to allow a user to control the content of these functions. Generally, we recommend not making calls to these functions with user input."),(0,a.kt)("h2",{id:"rce-via-command-injection-ossystem"},"RCE via Command Injection (os.system)"),(0,a.kt)("h3",{id:"issue-1"},"ISSUE"),(0,a.kt)("p",null,"This kind of RCE involves user input flowing into a command executed in a system shell. If a user can control a portion of the command being executed in a shell, they can potentially add additional arbitrary commands to be executed."),(0,a.kt)("h3",{id:"example-1"},"EXAMPLE"),(0,a.kt)("p",null,"The following code is intended to run the spellcheck binary on a user provided text:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def spellcheck(request: HttpRequest):\n    command = f\"/usr/bin/spellcheck -l {request.GET['text']}\"\n    return subprocess.getoutput(command)\n")),(0,a.kt)("p",null,"An attacker, however, can supply a path such as ",(0,a.kt)("inlineCode",{parentName:"p"},"'test' && rm -rf /"),", which would result in the following command being executed: ",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/bin/spellcheck -l 'test' && rm -rf /"),". Since this command is executed in a system shell the ",(0,a.kt)("inlineCode",{parentName:"p"},"rm -rf /")," command will be executed after the spellcheck command."),(0,a.kt)("h3",{id:"recommended-solution-1"},"RECOMMENDED SOLUTION"),(0,a.kt)(c.OssOnly,{mdxType:"OssOnly"},(0,a.kt)("p",null,"In general, we recommend avoiding creation of a subprocess and prefer using the API provided by the language.\nHowever, if you need to create a subprocess, we recommend using an API such as ",(0,a.kt)("inlineCode",{parentName:"p"},"subprocess.run"),", which allows you to separate arguments from the executable being invoked. ",(0,a.kt)("strong",{parentName:"p"},"DO NOT add the ",(0,a.kt)("inlineCode",{parentName:"strong"},"shell=True")," argument otherwise the code would still be vulnerable like the previous example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def spellcheck(request: HttpRequest):\n    command = ["/usr/bin/spellcheck", "-l", request.GET[\'text\']]\n    subprocess.run(command)\n')),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"NOTE: be conscious of the fact that arguments to an executable can still lead to code execution (e.g., the ",(0,a.kt)("inlineCode",{parentName:"em"},"-exec")," argument of ",(0,a.kt)("inlineCode",{parentName:"em"},"find"),")."))),(0,a.kt)(c.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,a.kt)(p,{mdxType:"Fb5001Solution"})))}h.isMDXComponent=!0}}]);