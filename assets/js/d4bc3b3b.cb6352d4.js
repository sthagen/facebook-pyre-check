(self.webpackChunk=self.webpackChunk||[]).push([[472],{3905:(e,n,t)=>{"use strict";t.d(n,{Zo:()=>p,kt:()=>d});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(t),d=i,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||r;return t?a.createElement(h,s(s({ref:n},p),{},{components:t})):a.createElement(h,s({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=c;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var u=2;u<r;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},3919:(e,n,t)=>{"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!a(e)}t.d(n,{b:()=>a,Z:()=>i})},4996:(e,n,t)=>{"use strict";t.d(n,{C:()=>r,Z:()=>s});var a=t(2263),i=t(3919);function r(){var e=(0,a.default)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,t=void 0===n?"/":n,r=e.url;return{withBaseUrl:function(e,n){return function(e,n,t,a){var r=void 0===a?{}:a,s=r.forcePrependBaseUrl,o=void 0!==s&&s,l=r.absolute,u=void 0!==l&&l;if(!t)return t;if(t.startsWith("#"))return t;if((0,i.b)(t))return t;if(o)return n+t;var p=t.startsWith(n)?t:n+t.replace(/^\//,"");return u?e+p:p}(r,t,e,n)}}}function s(e,n){return void 0===n&&(n={}),(0,r().withBaseUrl)(e,n)}},8458:(e,n,t)=>{"use strict";t.r(n),t.d(n,{frontMatter:()=>l,metadata:()=>u,toc:()=>p,default:()=>c});var a=t(2122),i=t(9756),r=(t(7294),t(3905)),s=t(4996),o=["components"],l={id:"pysa-implementation-details",title:"Implementation Details",sidebar_label:"Implementation Details"},u={unversionedId:"pysa-implementation-details",id:"pysa-implementation-details",isDocsHomePage:!1,title:"Implementation Details",description:"This page covers how Pysa actually tracks the flow of tainted data from source",source:"@site/docs/pysa_implementation_details.md",sourceDirName:".",slug:"/pysa-implementation-details",permalink:"/docs/pysa-implementation-details",editUrl:"https://github.com/facebook/pyre-check/tree/master/documentation/website/docs/pysa_implementation_details.md",version:"current",sidebar_label:"Implementation Details",frontMatter:{id:"pysa-implementation-details",title:"Implementation Details",sidebar_label:"Implementation Details"},sidebar:"pysa",previous:{title:"Advanced Topics",permalink:"/docs/pysa-advanced"},next:{title:"Running Pysa",permalink:"/docs/pysa-running"}},p=[{value:"Summaries",id:"summaries",children:[{value:"Iteration",id:"iteration",children:[]},{value:"Source Summaries",id:"source-summaries",children:[]},{value:"Sink Summaries",id:"sink-summaries",children:[]},{value:"Taint In Taint Out (TITO) Summaries",id:"taint-in-taint-out-tito-summaries",children:[]}]},{value:"Emitting Issues",id:"emitting-issues",children:[]},{value:"Visualizing Issues",id:"visualizing-issues",children:[]}],m={toc:p};function c(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page covers how Pysa actually tracks the flow of tainted data from source\nto sink. These implementation details affect how some functionality of Pysa\nworks, such as source- and sink-specific sanitizers, so it is useful reading\neven for end users who never intend to work on Pysa itself."),(0,r.kt)("p",null,"This page is a subset of what is presented in the ",(0,r.kt)("a",{parentName:"p",href:"https://youtu.be/8I3zlvtpOww?t=2358"},"Pysa DEF CON\nTutorial"),". Work through that tutorial for\nan even more complete understanding of how Pysa works."),(0,r.kt)("h2",{id:"summaries"},"Summaries"),(0,r.kt)("p",null,"Pysa works by computing ",(0,r.kt)("em",{parentName:"p"},"summaries")," of all functions. ",(0,r.kt)("strong",{parentName:"p"},"Summaries")," describe:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Which function arguments hit sinks"),(0,r.kt)("li",{parentName:"ul"},"Which sources the function returns"),(0,r.kt)("li",{parentName:"ul"},"Which arguments propagate their taint to the return value in some way")),(0,r.kt)("p",null,"These summaries cover the entire call graph of the function. Covering the entire\ncall graph means that if ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," calls ",(0,r.kt)("inlineCode",{parentName:"p"},"bar"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"foo"),"'s summary will include\ninformation on sources and sinks that are reachable in ",(0,r.kt)("inlineCode",{parentName:"p"},"bar"),"."),(0,r.kt)("h3",{id:"iteration"},"Iteration"),(0,r.kt)("p",null,"Pysa's summary inference process is iterative. Summaries must be continually\nrecomputed until a global fixed point is reached. The fixed point occurs when an\nentire iteration is completed without any summary changing. Pysa uses a call\ndependency graph to determine which functions need to be re-analyzed after a\ngiven iteration (ie. if ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," calls ",(0,r.kt)("inlineCode",{parentName:"p"},"bar"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"bar"),"'s summary changed last\niteration, ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," must be reanalyzed this iteration to see if it's summary will\nalso change)."),(0,r.kt)("h3",{id:"source-summaries"},"Source Summaries"),(0,r.kt)("p",null,"The source portion of summaries track how data from a source is eventually\nreturned by a function. To compute the source portion of a summary, Pysa must\nstart with a model such as this one that states ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," returns tainted data of\ntype ",(0,r.kt)("inlineCode",{parentName:"p"},"UserControlled"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def source() -> TaintSource[UserControlled]: ...\n")),(0,r.kt)("p",null,"Then Pysa can analyze the source code of a function such as ",(0,r.kt)("inlineCode",{parentName:"p"},"returns_source")," and\ninfer that it will also return taint of type ",(0,r.kt)("inlineCode",{parentName:"p"},"UserControlled"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def returns_source():\n  return source()\n")),(0,r.kt)("p",null,"This inference results in a summary for ",(0,r.kt)("inlineCode",{parentName:"p"},"returns_source"),", which we can\nconceptually think of as an inferred model like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def returns_source() -> TaintSource[UserControlled]: ...\n")),(0,r.kt)("p",null,"Pysa's next iteration can start with that summary for ",(0,r.kt)("inlineCode",{parentName:"p"},"returns_source"),", and use\nit when anlyzing the code for ",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_source"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def wraps_source():\n  return returns_source()\n")),(0,r.kt)("p",null,"From this code, Pysa can infer a model documenting that ",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_source")," will also\nend up (indirectly) returning taint of type ",(0,r.kt)("inlineCode",{parentName:"p"},"UserControlled"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def wraps_source() -> TaintSource[UserControlled]\n")),(0,r.kt)("h3",{id:"sink-summaries"},"Sink Summaries"),(0,r.kt)("p",null,"The sink portion of summaries track how arguments to a function eventually flow\ninto a sink. To compute the sink portion of a summary, Pysa must start with a\nmodel such as this one that states ",(0,r.kt)("inlineCode",{parentName:"p"},"sink"),"'s parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"arg")," is as an\n",(0,r.kt)("inlineCode",{parentName:"p"},"RemoteCodeExecution")," sink:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def sink(arg: TaintSink[RemoteCodeExecution]): ...\n")),(0,r.kt)("p",null,"Then Pysa can analyze the source code of a function such as ",(0,r.kt)("inlineCode",{parentName:"p"},"calls_sink")," and\ninfer that ",(0,r.kt)("inlineCode",{parentName:"p"},"calls_sink"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"arg")," will also end up in a ",(0,r.kt)("inlineCode",{parentName:"p"},"RemoteCodeExecution"),"\nsink:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def calls_sink(arg):\n  sink(arg)\n")),(0,r.kt)("p",null,"This inference results in a summary for ",(0,r.kt)("inlineCode",{parentName:"p"},"calls_sink"),", which we can\nconceptually think of as an inferred model like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def calls_sink(arg: TaintSink[RemoteCodeExecution]): ...\n")),(0,r.kt)("p",null,"Pysa's next iteration can start with that summary for ",(0,r.kt)("inlineCode",{parentName:"p"},"calls_sink"),", and use it\nwhen anlyzing the code for ",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_sink"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def wraps_sink(arg):\n  calls_sink(arg)\n")),(0,r.kt)("p",null,"From this code, Pysa can infer a model documenting that ",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_sink"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"arg"),"\nwill also end up (indirectly) reaching an ",(0,r.kt)("inlineCode",{parentName:"p"},"RemoteCodeExecution")," sink:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def wraps_sink(arg: TaintSink[RemoteCodeExecution]): ...\n")),(0,r.kt)("h3",{id:"taint-in-taint-out-tito-summaries"},"Taint In Taint Out (TITO) Summaries"),(0,r.kt)("p",null,"Pysa summaries also track how tainted data propagates from function arguments\ninto that function's return value. This is known as ",(0,r.kt)("em",{parentName:"p"},"Taint In Taint Out")," (TITO).\nWhen computing the TITO portion of summaries, Pysa does not need to start from a\nmodel at all (however, ",(0,r.kt)("a",{parentName:"p",href:"/docs/pysa-basics#taint-propagation"},"an explicit ",(0,r.kt)("inlineCode",{parentName:"a"},"TaintInTaintOut"),"\nmodel")," can be written, if desired). Pysa can\nsimply start by looking at the source code for a function like ",(0,r.kt)("inlineCode",{parentName:"p"},"tito")," and\ninferring that it's ",(0,r.kt)("inlineCode",{parentName:"p"},"arg")," parameter gets propagated to the return value of the\nfunction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def tito(arg):\n  return arg\n")),(0,r.kt)("p",null,"This inference results in a summary for ",(0,r.kt)("inlineCode",{parentName:"p"},"tito"),", which we can conceptually think\nof as an inferred model like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def tito(arg: TaintInTaintOut): ...\n")),(0,r.kt)("p",null,"Pysa's next iteration can start with that summary for ",(0,r.kt)("inlineCode",{parentName:"p"},"tito"),", and use it\nwhen anlyzing the code for ",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_tito"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def wraps_tito(arg):\n  return tito(arg)\n")),(0,r.kt)("p",null,"From this code, Pysa can infer a model documenting that ",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_tito"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"arg"),"\nwill also end up (indirectly) propagated to the return value of the function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def wraps_tito(arg: TaintInTaintOut): ...\n")),(0,r.kt)("h2",{id:"emitting-issues"},"Emitting Issues"),(0,r.kt)("p",null,"An ",(0,r.kt)("em",{parentName:"p"},"issue")," indicates that Pysa has found a flow of data from a source to a sink\n(for any source-sink pair specified in a ",(0,r.kt)("a",{parentName:"p",href:"/docs/pysa-basics#rules"},(0,r.kt)("em",{parentName:"a"},"rule")),"). Issues\noccur in the function where summaries indicate data from a source is returned\nfrom one function and is then passed into another function whose argument\nreaches a sink. This means issues often unintuitively occur in a function that\nis somewhere in the middle of the flow from source to sink."),(0,r.kt)("p",null,"Continuing the previous examples, Pysa can use the summaries computed for\n",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_source"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_sink"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_tito")," to identify an issue in\n",(0,r.kt)("inlineCode",{parentName:"p"},"find_issue"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def find_issue():\n  x = wraps_source() # x: TaintSource[UserControlled]\n  y = wraps_tito(x)  # y: TaintSource[UserControlled]\n  wraps_sink(y)      # Issue!\n")),(0,r.kt)("p",null,"The summary for ",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_source")," tells Pysa the return value is tainted data of\ntype ",(0,r.kt)("inlineCode",{parentName:"p"},"UserControlled"),", and thus ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is marked as ",(0,r.kt)("inlineCode",{parentName:"p"},"UserControlled"),". The summary\nfor ",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_tito")," tells Pysa that tainted data passed in through ",(0,r.kt)("inlineCode",{parentName:"p"},"arg")," will be\npropagated to the return value, and thus ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," is marked with the same taint as\n",(0,r.kt)("inlineCode",{parentName:"p"},"x")," (",(0,r.kt)("inlineCode",{parentName:"p"},"UserControlled"),"). Finally, the summary of ",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_sink")," tells Pysa that\ndata passed into ",(0,r.kt)("inlineCode",{parentName:"p"},"arg")," eventually reaches a sink of kind ",(0,r.kt)("inlineCode",{parentName:"p"},"RemoteCodeExecution"),".\nAssuming we have a ",(0,r.kt)("em",{parentName:"p"},"rule")," that says we want to find flows from ",(0,r.kt)("inlineCode",{parentName:"p"},"UserControlled"),"\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"RemoteCodeExecution"),", Pysa will then emit an issue on the line where\n",(0,r.kt)("inlineCode",{parentName:"p"},"wraps_sink")," is called with the ",(0,r.kt)("inlineCode",{parentName:"p"},"UserControlled")," data in ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),"."),(0,r.kt)("h2",{id:"visualizing-issues"},"Visualizing Issues"),(0,r.kt)("p",null,"Visualizing the flow of data in a given issue ends up looking something like\nthis:"),(0,r.kt)("img",{alt:"Combining summaries to find an issue",src:(0,s.Z)("img/issue_visualization.png")}),(0,r.kt)("p",null,"Overall, the traces form an inverted V, with sources and sinks connecting at the\napex. There can be multiple sources for an issue, because two different sources\ncan both end up combined into a single return value for a function. Similarly,\nthere can be multiple sinks because a single argument to a function could be\npassed into two different sinks."),(0,r.kt)("p",null,"The TITO process appears as a loop in this visualization, because data passed\ninto a TITO function will always end up back in the original function via the\nreturn value of the TITO function."))}c.isMDXComponent=!0}}]);