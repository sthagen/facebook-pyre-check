(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),i=(n(0),n(96)),o={id:"installation",title:"Installation",sidebar_label:"Installation"},c={unversionedId:"installation",id:"installation",isDocsHomePage:!1,title:"Installation",description:"We recommend that you use our binary distribution through pypi inside of a virtual environment, which supports both MacOs and Linux. On Windows we have successfully gotten pyre to work through WSL, but do not officially support it.",source:"@site/docs/installation.md",slug:"/installation",permalink:"/docs/installation",editUrl:"https://github.com/facebook/pyre-check/tree/master/documentation/website/docs/installation.md",version:"current",sidebar_label:"Installation",sidebar:"pyre",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Configuration",permalink:"/docs/configuration"}},p=[{value:"Binary Distribution",id:"binary-distribution",children:[]},{value:"IDE Integration",id:"ide-integration",children:[]},{value:"Building from Source",id:"building-from-source",children:[{value:"Requirements",id:"requirements",children:[]},{value:"Getting the Source",id:"getting-the-source",children:[]}]},{value:"Windows Subsystem for Linux (WSL) Install",id:"windows-subsystem-for-linux-wsl-install",children:[]}],l={rightToc:p};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"We recommend that you use our binary distribution through ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://pypi.org/"}),"pypi")," inside of a virtual environment, which supports both ",Object(i.b)("em",{parentName:"p"},"MacOs")," and ",Object(i.b)("em",{parentName:"p"},"Linux"),". On ",Object(i.b)("em",{parentName:"p"},"Windows")," we have successfully gotten ",Object(i.b)("inlineCode",{parentName:"p"},"pyre")," to work through ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux"}),"WSL"),", but do not officially support it."),Object(i.b)("h2",{id:"binary-distribution"},"Binary Distribution"),Object(i.b)("p",null,"You can get Pyre through ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://pypi.org/"}),"pypi")," by running:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ (venv) $ pip install pyre-check\n")),Object(i.b)("p",null,"See our ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"getting-started"}),"Getting Started")," section for a more detailed example, including setup for a virtual environment."),Object(i.b)("h2",{id:"ide-integration"},"IDE Integration"),Object(i.b)("p",null,"Pyre supports the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Language_Server_Protocol"}),"Language Server Protocol"),". We provide an ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://marketplace.visualstudio.com/items?itemName=fb-pyre-check.pyre-vscode"}),"extension for ",Object(i.b)("em",{parentName:"a"},"VSCode"))," that will automatically try to connect to a running server. You can also directly interact with the LSP by piping the appropriate ",Object(i.b)("inlineCode",{parentName:"p"},"JSON")," into ",Object(i.b)("inlineCode",{parentName:"p"},"pyre persistent"),"."),Object(i.b)("h2",{id:"building-from-source"},"Building from Source"),Object(i.b)("p",null,"These instructions are known to work on ",Object(i.b)("em",{parentName:"p"},"Mac OS X")," (tested on ",Object(i.b)("em",{parentName:"p"},"High\nSierra")," through ",Object(i.b)("em",{parentName:"p"},"OSX 10.13")," - even though binaries are compatible with versions\nas old as ",Object(i.b)("em",{parentName:"p"},"10.11"),") and ",Object(i.b)("em",{parentName:"p"},"Linux")," (tested on ",Object(i.b)("em",{parentName:"p"},"Ubuntu 16.04 LTS")," and ",Object(i.b)("em",{parentName:"p"},"CentOS 7"),")."),Object(i.b)("h3",{id:"requirements"},"Requirements"),Object(i.b)("p",null,"In addition to ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"getting-started#requirements"}),"Python and watchman"),", we need a working ",Object(i.b)("em",{parentName:"p"},"OCaml")," compiler. We use\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://opam.ocaml.org/"}),"Opam")," to manage our compiler and libraries. You can get Opam via various\npackage management systems. Please follow their instructions for your particular operating system."),Object(i.b)("p",null,"Once you have Opam on your system, switch to a current compiler with"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ opam switch 4.10.2\n")),Object(i.b)("p",null,"This will compile the compiler from scratch and is likely going to take some time on your system."),Object(i.b)("h3",{id:"getting-the-source"},"Getting the Source"),Object(i.b)("p",null,"With a working OCaml, you can clone the source from ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/facebook/pyre-check"}),"GitHub")," with"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ git clone https://github.com/facebook/pyre-check\n")),Object(i.b)("p",null,"You can complete the setup of your development environment with"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ cd pyre-check\n$ ./scripts/setup.sh --local\n")),Object(i.b)("p",null,"This will generate a ",Object(i.b)("inlineCode",{parentName:"p"},"Makefile")," in your checkout directory. You can subsequently build and test\n",Object(i.b)("inlineCode",{parentName:"p"},"pyre")," with"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ make\n$ make test\n")),Object(i.b)("h2",{id:"windows-subsystem-for-linux-wsl-install"},"Windows Subsystem for Linux (WSL) Install"),Object(i.b)("p",null,"On ",Object(i.b)("em",{parentName:"p"},"x86_64")," Windows ",Object(i.b)("inlineCode",{parentName:"p"},"pyre")," can run via ",Object(i.b)("em",{parentName:"p"},"Linux")," using ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux"}),"WSL"),".\nA brief summary to get this running on ",Object(i.b)("em",{parentName:"p"},"Ubuntu")," please follow:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://docs.microsoft.com/en-us/windows/wsl/install-win10"}),"Install WSL")," ",Object(i.b)("em",{parentName:"li"},"(external Microsoft Documentation)")),Object(i.b)("li",{parentName:"ul"},"Once you have a login to your Linux of choice:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Optionally: Install build environment (some dependencies of ",Object(i.b)("inlineCode",{parentName:"li"},"pyre")," might need to be built)"),Object(i.b)("li",{parentName:"ul"},"Use ",Object(i.b)("inlineCode",{parentName:"li"},"pip")," as described above or via a ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://docs.python.org/3/tutorial/venv.html"}),"Python Virtual Environment")))),Object(i.b)("li",{parentName:"ul"},"Here is an example using ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.ubuntu.com/"}),"Ubuntu")," with a ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://docs.python.org/3/tutorial/venv.html"}),"venv"),":")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ sudo apt install python3-venv build-essential python3-dev libpython3-dev\n$ python3 -m venv /tmp/tp\n$ /tmp/tp/bin/pip install --upgrade pip setuptools wheel\n$ /tmp/tp/bin/pip install pyre-check\n$ source /tmp/tp/bin/activate\n$ cd /mnt/c/path/to/repo\n$ pyre --source-directory . check\n\n$ (tp) cooper@TESTFAC-1FMHLI2:/mnt/c/path/to/repo$ pyre --source-directory . check\n \u019b Setting up a `.pyre_configuration` with `pyre init` may reduce overhead.\n \u019b No type errors found\n")))}b.isMDXComponent=!0},96:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),b=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=b(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=b(n),m=r,d=s["".concat(o,".").concat(m)]||s[m]||u[m]||i;return n?a.a.createElement(d,c(c({ref:t},l),{},{components:n})):a.a.createElement(d,c({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);