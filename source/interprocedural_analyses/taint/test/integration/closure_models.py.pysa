def _test_sink(arg: TaintSink[Test, Via[special_sink]]): ...
def _test_source() -> TaintSource[Test, Via[special_source]]: ...

def closure_models.inner_sink_wrapper.inner_sink(x: TaintSink[Test]): ...
def closure_models.outer() -> TaintSource[Test]: ...
def closure_models.test.return_model_taint() -> TaintSource[Test]: ...

@CapturedVariables(TaintInTaintOut)
def closure_models.test.return_model_taint_tito(): ...

ModelQuery(
    name = "return_model_query_tito",
    find = "functions",
    where = fully_qualified_name.matches("closure_models.test.return_model_query_tito"),
    model = CapturedVariables(TaintInTaintOut)
)

def closure_models.Reclassification.reclassify(self: TaintSink[Test, ViaValueOf[feature, WithTag["feature2"]]],*,feature): ...
def closure_models.reclassify(inner: TaintInTaintOut[ViaValueOf[feature, WithTag["feature1"]]], feature): ...

@CapturedVariables(TaintInTaintOut)
def closure_models.captured_variable_model_tito.model_all_captured_as_tito(): ...

@CapturedVariables(TaintSource[Test])
def closure_models.captured_variable_model_parameter_source.model_all_captured_as_parameter_sources(): ...

@CapturedVariables(TaintSource[Test], generation=True)
def closure_models.captured_variable_model_generation_source.model_all_captured_as_generation_sources(): ...


@CapturedVariables(TaintSource[Test], generation=True)
def closure_models.captured_variable_model_both_generation_parameter_source.model_all_captured_as_generation_and_parameter_sources(): ...

@CapturedVariables(TaintSource[Test])
def closure_models.captured_variable_model_both_generation_parameter_source.model_all_captured_as_generation_and_parameter_sources(): ...

@CapturedVariables(TaintSink[Test])
def closure_models.captured_variable_model_sink.model_all_captured_as_sinks(): ...

@CapturedVariables(TaintInTaintOut[Transform[ReclassificationFakeTITO]])
def closure_models.test_tito_transform.return_model_taint_tito(): ...

ModelQuery(
    name = "return_model_query_tito_transform",
    find = "functions",
    where = fully_qualified_name.matches("closure_models.test_tito_transform.return_model_query_tito"),
    model = CapturedVariables(TaintInTaintOut[Transform[ReclassificationFakeTITO]])
)


ModelQuery(
    name = "mark_captured_locals_as_tainted",
    find = "functions",
    where = fully_qualified_name.matches("closure_models.test_dsl_source.local_function_capturing_local_variable"),
    model = CapturedVariables(TaintSource[Test])
)

# TODO(T171117938): Decorator inlining causes unignored decorators to break closure taint flows
# Remove `@IgnoreDecorator` when fixed
@IgnoreDecorator
def closure_models.some_decorator(): ...

ModelQuery(
    name = "mark_captured_locals_from_decorator_as_tainted",
    find = "functions",
    where = Decorator(fully_qualified_callee.matches("closure_models.some_decorator")),
    model = CapturedVariables(TaintSource[Test])
)
