def _test_sink(arg: TaintSink[Test]): ...
def _test_source() -> TaintSource[Test]: ...

ModelQuery(
  name = "build_extendsbase_cache",
  find = "methods",
  where = [
    fully_qualified_name.matches("^model_query_cache."),
    cls.extends("model_query_cache.Base"),
  ],
  model = WriteToCache(kind="ExtendsBase", name=f"{class_name}:{method_name}")
)

ModelQuery(
  name = "get_A_bar",
  find = "methods",
  where = read_from_cache(kind="ExtendsBase", name="A:bar"),
  model = Returns(TaintSource[Test, ReturnPath[_.get_A_bar]])
)

ModelQuery(
  name = "get_B_foo",
  find = "methods",
  where = [
    read_from_cache(kind="ExtendsBase", name="B:foo"),
    cls.name.equals("B"),
  ],
  model = Returns(TaintSource[Test, ReturnPath[_.get_B_foo]])
)

# should not match anything.
ModelQuery(
  name = "get_DoesNotExtendsBase_foo",
  find = "methods",
  where = read_from_cache(kind="ExtendsBase", name="DoesNotExtendsBase:foo"),
  model = Returns(TaintSource[Test, ReturnPath[_.get_DoesNotExtendsBase_foo]])
)

ModelQuery(
  name = "get_AnyOf_BC_bar",
  find = "methods",
  where = AnyOf(
    read_from_cache(kind="ExtendsBase", name="B:bar"),
    read_from_cache(kind="ExtendsBase", name="C:bar"),
  ),
  model = Returns(TaintSource[Test, ReturnPath[_.get_AnyOf_BC_bar]])
)


ModelQuery(
  name = "build_decorated_cache",
  find = "methods",
  where = cls.decorator(name.equals("decorated")),
  model = WriteToCache(kind="Decorated", name=f"{method_name}")
)

ModelQuery(
  name = "get_decorated_foo",
  find = "methods",
  where = read_from_cache(kind="Decorated", name="foo"),
  model = Returns(TaintSource[Test, ReturnPath[_.get_decorated_foo]])
)

ModelQuery(
  name = "build_table_cache",
  find = "methods",
  where = [
    cls.extends("model_query_cache.Table"),
    cls.name.matches("^(?P<table>.*)Table$"),
    name.matches("^attribute_(?P<attribute>.*)$"),
  ],
  model = WriteToCache(kind="Table", name=f"{capture(table)}:{capture(attribute)}")
)

ModelQuery(
  name = "get_table_Foo_y",
  find = "methods",
  where = read_from_cache(kind="Table", name="Foo:y"),
  model = Returns(TaintSource[Test, ReturnPath[_.get_table_Foo_y]])
)

ModelQuery(
  name = "get_table_Bar_x",
  find = "methods",
  where = read_from_cache(kind="Table", name="Bar:x"),
  model = Returns(TaintSource[Test, ReturnPath[_.get_table_Bar_x]])
)

# should not match anything.
ModelQuery(
  name = "get_table_Bar_t",
  find = "methods",
  where = read_from_cache(kind="Table", name="Bar:t"),
  model = Returns(TaintSource[Test, ReturnPath[_.get_table_Bar_t]])
)

# invalid captures are replaced by the empty string
ModelQuery(
  name = "build_invalid_cache",
  find = "methods",
  where = [
    cls.extends("model_query_cache.Table"),
    cls.name.matches("^(?P<table>.*)Table$"),
    name.matches("^attribute_(?P<attribute>.*)$"),
  ],
  model = WriteToCache(kind="Invalid", name=f"{capture(table)}:{capture(attribute_typo)}")
)

ModelQuery(
  name = "get_invalid_table",
  find = "methods",
  where = read_from_cache(kind="Invalid", name="Foo:"),
  model = Returns(TaintSource[Test, ReturnPath[_.get_invalid_table]])
)
