def _test_sink(arg: TaintSink[Test, Via[special_sink]]): ...
def _test_source() -> TaintSource[Test, Via[special_source]]: ...

def cross_repository.cross_repository_source(
  source_parameter: CrossRepositoryTaint[
    TaintSource[UserControlled],
    'crossRepositorySource',
    'formal(0)',
    1,
    2
  ]): ...

def cross_repository.returns_crtex_source() -> CrossRepositoryTaint[
    TaintSource[UserControlled],
    'crossRepositorySource',
    'result',
    1,
    3
  ]: ...


def cross_repository.reaches_crtex_sink(
  x: CrossRepositoryTaint[
    TaintSink[Test],
    'crossRepositorySink',
    'formal(x)',
    1,
    5
  ]
): ...

def cross_repository.cross_repository_anchor_sink(
  sink_parameter: CrossRepositoryTaintAnchor[
    TaintSink[Test],
    'crossRepositoryAnchor',
    'formal(0)'
  ]
): ...


ModelQuery(
  name = "cross_repository_taint_anchor_1",
  find = "methods",
  where = cls.name.matches("Anchor"),
  model = Parameters(
    CrossRepositoryTaintAnchor[TaintSink[Test], f"test_1:{class_name}:{method_name}", f"formal({parameter_position}).{capture(name)}"],
    where = name.matches("^crtex_(?P<name>.*)$")
  )
)

ModelQuery(
  name = "cross_repository_taint_anchor_2",
  find = "methods",
  where = cls.name.matches("Anchor"),
  model = AllParameters(
    CrossRepositoryTaintAnchor[TaintSink[Test], f"test_2:{class_name}:{parameter_name}", f"formal({parameter_position})"]
  )
)

ModelQuery(
  name = "cross_repository_taint_anchor_3",
  find = "methods",
  where = cls.name.matches("Anchor"),
  model = AllParameters(
    CrossRepositoryTaintAnchor[TaintSink[Test], f"test_3:{class_name}:{method_name}", f"formal({3 * parameter_position + 1})"]
  )
)
