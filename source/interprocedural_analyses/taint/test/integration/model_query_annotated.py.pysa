def _test_sink(arg: TaintSink[Test, Via[special_sink]]): ...
def _test_source() -> TaintSource[Test, Via[special_source]]: ...

ModelQuery(
  name = "get_model_query_annotated_test1_sources",
  find = "attributes",
  where = [
      parent.equals("model_query_annotated.Test1_C"),
      type_annotation.matches(".*Annotated\[.*Color\..*")
    ],
  model = [
    AttributeModel(TaintSource[Test, ViaTypeOf]),
  ]
)

ModelQuery(
  name = "get_model_query_annotated_test2_sources",
  find = "attributes",
  where = [
      parent.equals("model_query_annotated.Test2_C"),
      AnyOf(
        type_annotation.equals("typing.Annotated[(typing.Optional[float], model_query_annotated.Color.RED)]"),
        type_annotation.equals("typing.Annotated[(typing.Optional[float], model_query_annotated.Color.RED, foo)]")
      )
    ],
  model = [
    AttributeModel(TaintSource[Test, ViaTypeOf]),
  ]
)

ModelQuery(
  name = "get_model_query_annotated_test3_sources",
  find = "functions",
  where = [
      name.matches("test3_"),
      AnyOf(
        any_parameter.annotation.matches(".*Annotated\[.*Color\..*"),
      )
    ],
  model = [
    Parameters(TaintSource[Test], where=[
      AnyOf(
        type_annotation.equals("typing.Annotated[(str, model_query_annotated.Color.RED)]"),
        type_annotation.equals("typing.Annotated[(str, model_query_annotated.Color.BLUE, foo)]")
      )
    ]),
  ]
)
