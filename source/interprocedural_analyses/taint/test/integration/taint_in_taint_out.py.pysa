def _test_sink(arg: TaintSink[Test, Via[special_sink]]): ...
def _test_source() -> TaintSource[Test, Via[special_source]]: ...

taint_in_taint_out.FieldIsTITO.add_tito: TaintInTaintOut[Via[string_concat_lhs]]
taint_in_taint_out.FieldIsTITO.add_tito: TaintSink[Test]
def taint_in_taint_out.adds_tito(x: TaintSource[Test]): ...
def taint_in_taint_out.adds_tito_inherited(x: TaintSource[Test]): ...
def taint_in_taint_out.tito_with_feature(arg: AttachToTito[Via[string_concat_rhs]]): ...
def taint_in_taint_out.add_feature(arg: AttachToTito[Via[string_concat_rhs]]): ...

def taint_in_taint_out.user_declared_tito_no_collapse(arg: TaintInTaintOut[NoCollapse]): ...
def taint_in_taint_out.user_declared_tito_collapse_one(arg: TaintInTaintOut[CollapseDepth[1]]): ...

class taint_in_taint_out.TitoSelf(InferSelfTito): ...
class taint_in_taint_out.TitoClassMethod(InferSelfTito): ...

@InferArgumentTito
def taint_in_taint_out.tito_from_0_to_1(): ...
@InferArgumentTito
def taint_in_taint_out.complex_argument_tito(): ...
