def _test_sink(arg: TaintSink[Test, Via[special_sink]]): ...
def _test_source() -> TaintSource[Test, Via[special_source]]: ...

class always_in_none.ComplicatedService(TaintSource[Test]): ...
def always_in_none.ComplicatedService.serve_tainted_request(self: TaintInTaintOut[Via[string_concat_rhs]]): ...
