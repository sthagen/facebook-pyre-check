def multiple_sources.user_controlled_input() -> TaintSource[UserControlled]: ...
def multiple_sources.permissive_context() -> TaintSource[PermissiveContext]: ...
def multiple_sources.Node.send(
    self: PartialSink[UserControlledAndVC[id]],
    vc: PartialSink[UserControlledAndVC[vc]],
): ...

def multiple_sources.a_source() -> TaintSource[TestA]: ...
def multiple_sources.b_source() -> TaintSource[TestB]: ...
def multiple_sources.combines_tests_and_context(
  test: PartialSink[ExpectsEitherTest[a]],
  vc: PartialSink[ExpectsEitherTest[b]]): ...
def multiple_sources.a_sink(arg: TaintSink[TestA]): ...
def multiple_sources.b_sink(arg: TaintSink[TestB]): ...
def multiple_sources.transform_t(arg: TaintInTaintOut[Transform[TransformT]]): ...
def multiple_sources.sanitize_source_a_tito(arg: Sanitize[TaintSource[TestA]]): ...
def multiple_sources.sanitize_source_b_tito(arg: Sanitize[TaintSource[TestB]]): ...
def multiple_sources.sanitize_sink_a_tito(arg: Sanitize[TaintSink[TestA]]): ...

def multiple_sources.A.multi_sink(
  self,
  user_controlled: PartialSink[UserControlledAndVC[id]],
  permissive_context: PartialSink[UserControlledAndVC[vc]]
): ...
def multiple_sources.B.multi_sink(
  self,
  user_controlled: PartialSink[UserControlledAndVC[id]],
  permissive_context: PartialSink[UserControlledAndVC[vc]]
): ...


def multiple_sources.c_source() -> TaintSource[TestC]: ...
def multiple_sources.d_source() -> TaintSource[TestD]: ...
def multiple_sources.e_source() -> TaintSource[TestE]: ...
def multiple_sources.multi_sink_share_both_sinks(
  x: PartialSink[ShareBothSinks[left]],
  y: PartialSink[ShareBothSinks[right]]
): ...
