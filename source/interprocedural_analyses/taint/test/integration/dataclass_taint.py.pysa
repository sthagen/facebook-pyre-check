def _test_sink(arg: TaintSink[Test, Via[special_sink]]): ...
def _test_source() -> TaintSource[Test, Via[special_source]]: ...

def dataclass_taint.WeirdDataClass.__init__(self, bad: TaintSource[UserControlled]): ...
dataclass_taint.WeirdDataClass.bad_sink: TaintSink[Test] = ...
dataclass_taint.DataClassWithSource.tainted: TaintSource[Test] = ...
dataclass_taint.DataClassWithOtherSource.tainted: TaintSource[Test]
dataclass_taint.DataClassWithClassAttributeTaintedDirectly.bad: TaintSink[Test]
def dataclass_taint.DataClassWithClassAttributeTaintedInConstructor.__init__(self, bad: TaintSink[Test]): ...
