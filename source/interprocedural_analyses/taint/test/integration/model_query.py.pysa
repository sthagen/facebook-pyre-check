def _test_sink(arg: TaintSink[Test]): ...
def _test_source() -> TaintSource[Test]: ...

ModelQuery(
  name = "get_foo_lhs_sources",
  find = "functions",
  where = [name.matches("foo")],
  model = [
    Returns(TaintSource[Test, Via[string_concat_lhs]]),
  ]
)

ModelQuery(
  name = "get_foo_rhs_sources",
  find = "methods",
  where = [name.matches("foo")],
  model = [
    Returns(TaintSource[Test, Via[string_concat_rhs]]),
  ]
)

ModelQuery(
  name = "get_parameters_sources",
  find = "functions",
  where = [name.matches("parameters")],
  model = [
    Parameters(TaintSource[Test], where=name.equals("x")),
    Parameters(TaintSource[Test, Via[string_concat_lhs]], where=name.equals("y")),
  ]
)

# Test positional parameters.
ModelQuery(
  name = "get_positional_sources",
  find = "functions",
  where = [name.matches("positional")],
  model = [
    Parameters(TaintSource[Test], where=index.equals(0)),
  ]
)

# For methods, self is index 0.
ModelQuery(
  name = "get_positional_lhs_sources",
  find = "methods",
  where = [name.matches("positional")],
  model = [
    Parameters(TaintSource[Test], where=index.equals(0)),
    Parameters(TaintSource[Test, Via[string_concat_lhs]], where=index.equals(1)),
  ]
)

ModelQuery(
  name = "get_Base_child_sources",
  find = "methods",
  where = [parent.equals("model_query.Base")],
  model = [
    Parameters(TaintSource[Test], where=index.equals(0)),
  ]
)

ModelQuery(
  name = "get_Base_subclass_sources",
  find = "methods",
  where = [parent.extends("model_query.Base")],
  model = [
    Parameters(TaintSource[Test], where=index.equals(1)),
  ]
)

# Test attribute models
ModelQuery(
  name = "get_AttributeModel_SourceA",
  find = "attributes",
  where = [parent.extends("model_query.AttributeTestBase")],
  model = [
    AttributeModel(TaintSource[SourceA])
  ]
)

ModelQuery(
  name = "get_foo_SourceB",
  find = "attributes",
  where = [name.matches("foo")],
  model = [
    AttributeModel(TaintSource[SourceB])
  ]
)

# Test attribute model queries work with existing models
ModelQuery(
  name = "get_AttributeTestClass3_SinkA",
  find = "attributes",
  where = [parent.equals("model_query.AttributeTestClass3")],
  model = [
    AttributeModel(TaintSink[SinkA])
  ]
)
model_query.AttributeTestClass3.attribute: TaintSink[SinkB] = ...
model_query.AttributeTestClass3.instance: TaintSink[SinkC] = ...
def model_query.alarm_5(source: TaintSource[Test]): ...


ModelQuery(
  name = "get_AttributeTestClass4_SourceC",
  find = "attributes",
  where = [parent.equals("model_query.AttributeTestClass4")],
  model = [
    AttributeModel(TaintSource[SourceC])
  ]
)
model_query.AttributeTestClass4.attribute: TaintSource[SourceD] = ...
model_query.AttributeTestClass4.instance: TaintSource[SourceE] = ...
def model_query.alarm_7() -> TaintSink[Test]: ...

# Testing some attribute queries that shouldn't generate any models
ModelQuery(
  name = "get_nothingshouldmatchthis_sources",
  find = "attributes",
  where = [name.matches("nothingshouldmatchthis")],
  model = [
    AttributeModel(TaintSource[Test])
  ]
)

ModelQuery(
  name = "get_NonExistentClass_sources",
  find = "attributes",
  where = [parent.equals("NonExistentClass")],
  model = [
    AttributeModel(TaintSource[Test])
  ]
)

ModelQuery(
  name = "get_NonExistentClass_subclass_sources",
  find = "attributes",
  where = [parent.extends("NonExistentClass")],
  model = [
    AttributeModel(TaintSource[Test])
  ]
)

ModelQuery(
  name = "get_method1_SourceA",
  find = "methods",
  where = [
    AllOf(
      parent.matches(".*ClassTest3_Alarm1.*"),
      name.matches(".*method1.*")
    )
  ],
  model = [
    Returns(TaintSource[SourceA]),
  ]
)

ModelQuery(
  name = "get_function_test1_SourceA",
  find = "functions",
  where = [name.matches("function_test1"), Not(name.matches("noalarm"))],
  model = [
    Returns(TaintSource[SourceA]),
  ]
)


ModelQuery(
  name = "get_method_test1_SourceB",
  find = "methods",
  where = [
    parent.matches("model_query.ClassTest1"),
    name.matches("method_test1"),
    Not(name.matches("noalarm"))
  ],
  model = [
    Returns(TaintSource[SourceB]),
  ]
)


ModelQuery(
  name = "get_ClassTest2_SourceC",
  find = "methods",
  where = [
    parent.matches("ClassTest2"),
    Not(parent.extends("model_query.NoAlarmClass"))
  ],
  model = [
    Returns(TaintSource[SourceC]),
  ]
)
