def _test_sink(arg: TaintSink[Test, Via[special_sink]]): ...
def _test_source() -> TaintSource[Test, Via[special_source]]: ...

def attach_features.source_with_inferred() -> AttachToSource[Via[string_concat_lhs]]: ...
def attach_features.source() -> TaintSource[Test]: ...
def attach_features.inferred_sink(
        taint_left: AttachToSink[Via[string_concat_lhs]],
        taint_right: AttachToSink[Via[string_concat_rhs]],
        taint_without_feature,
        untainted): ...

def attach_features.taint_in_taint_out(arg: AttachToTito[Via[string_concat_lhs]]): ...

def attach_features.tito_and_sink(arg: AttachToTito[Via[string_concat_lhs]]): ...
def attach_features.tito_and_sink(arg: AttachToSink[Via[string_concat_rhs]]): ...

def attach_features.attach_without_tito(arg: AttachToTito[Via[string_concat_lhs]]): ...

def attach_features.modeled_sink_with_optionals(b: AttachToSink[Via[string_concat_rhs]]=...): ...

def attach_features.HasMethods.method_with_optionals(
  self,
  b: AttachToSink[Via[string_concat_rhs]] = ...,
): ...

def attach_features.attach_to_returned_sink() -> AttachToSink[Via[string_concat_lhs]]: ...
def attach_features.attach_to_returned_sink() -> TaintSink[Test]: ...

def attach_features.attach_to_returned_source() -> AttachToSource[Via[string_concat_lhs]]: ...
def attach_features.attach_to_returned_source() -> TaintSource[Test]: ...

def attach_features.attach_to_returned_source_ports() -> AppliesTo["f", TaintSource[Test]]: ...
def attach_features.attach_to_returned_source_ports() -> AppliesTo["g", AppliesTo["h", TaintSource[Test]]]: ...
def attach_features.attach_to_returned_source_ports() -> AppliesTo["g", AttachToSource[Via[string_concat_lhs]]]: ...

def attach_features.attach_to_returned_source_2() -> TaintSource[Test, Via[string_concat_lhs]]: ...
