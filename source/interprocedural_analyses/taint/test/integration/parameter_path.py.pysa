def _test_sink(arg: TaintSink[Test, Via[special_sink]]): ...
def _test_source() -> TaintSource[Test, Via[special_source]]: ...

# Test for sources.

# Tainting tuple indices.
def parameter_path.source_on_first() -> TaintSource[Test, ReturnPath[_[0]]]: ...
def parameter_path.source_on_second() -> TaintSource[Test, ReturnPath[_[1]]]: ...
def parameter_path.source_on_0_1() -> TaintSource[Test, ReturnPath[_[0][1]]]: ...

# Tainting dictionary keys.
def parameter_path.source_on_key_a() -> TaintSource[Test, ReturnPath[_["a"]]]: ...

# Tainting members.
def parameter_path.source_on_member_a() -> TaintSource[Test, ReturnPath[_.a]]: ...

# Test for sinks.

# Tainting tuple indices.
def parameter_path.sink_on_first(arg: TaintSink[Test, ParameterPath[_[0]]]): ...
def parameter_path.sink_on_second(arg: TaintSink[Test, ParameterPath[_[1]]]): ...
def parameter_path.sink_on_0_1(arg: TaintSink[Test, ParameterPath[_[0][1]]]): ...

# Tainting dictionary keys.
def parameter_path.sink_on_key_a(arg: TaintSink[Test, ParameterPath[_["a"]]]): ...

# Tainting members.
def parameter_path.sink_on_member_a(arg: TaintSink[Test, ParameterPath[_.a]]): ...

# Test for taint-in-taint-out.

def parameter_path.tito_from_first(arg: TaintInTaintOut[ParameterPath[_[0]]]): ...
def parameter_path.tito_from_second(arg: TaintInTaintOut[ParameterPath[_[1]]]): ...
def parameter_path.tito_from_first_to_second(arg: TaintInTaintOut[ParameterPath[_[0]], ReturnPath[_[1]]]): ...
def parameter_path.tito_from_b_to_a(arg: TaintInTaintOut[ParameterPath[_.b], ReturnPath[_.a]]): ...
def parameter_path.tito_from_a_to_self_b(self, arg: TaintInTaintOut[Updates[self], ParameterPath[_.a], UpdatePath[_.b]]): ...

def parameter_path.complex_tito(arg: TaintInTaintOut[ParameterPath[_["a"].all().keys()], ReturnPath[_["foo"]]]): ...
