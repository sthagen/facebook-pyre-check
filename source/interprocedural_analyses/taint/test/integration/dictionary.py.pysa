def _test_sink(arg: TaintSink[Test, Via[special_sink]]): ...
def _test_source() -> TaintSource[Test, Via[special_source]]: ...

dictionary.tainted_dictionary: TaintSink[Test] = ...

# The following models should be in sync with stubs/taint/common/collection_propagation.pysa

@SkipObscure
def typing.MutableMapping.update(self, __m: TaintInTaintOut[Updates[self], ParameterPath[_.all()], UpdatePath[_.all()], Collapse]): ...
def typing.MutableMapping.update(self, __m: TaintInTaintOut[Updates[self], ParameterPath[_.keys()], UpdatePath[_.keys()], NoCollapse]): ...
def typing.MutableMapping.update(self, **kwargs: TaintInTaintOut[Updates[self], UpdatePath[_.all()], NoCollapse]): ...

@SkipObscure
def dict.get(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse],
    __key: Sanitize[TaintInTaintOut],
    __default: TaintInTaintOut[LocalReturn, NoCollapse],
): ...

@SkipObscure
def typing.Mapping.get(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse],
    __key: Sanitize[TaintInTaintOut],
    default: TaintInTaintOut[LocalReturn, NoCollapse],
): ...

@SkipObscure
def dict.__getitem__(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse],
    __key: Sanitize[TaintInTaintOut],
): ...

@SkipObscure
def typing.Mapping.__getitem__(
    self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse],
    __key: Sanitize[TaintInTaintOut],
): ...

@SkipOverrides
def dict.__setitem__(self): ...

# Duplicated models to test model joins
def dict.get(self: TaintInTaintOut[LocalReturn, ParameterPath[_.all()], NoCollapse], __k, __default = ...): ...
