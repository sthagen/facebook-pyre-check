@generated
{
  "kind": "issue",
  "data": {
    "callable":
      "class_flows.tainted_class_attribute_through_double_underscore_class_issue",
    "callable_line": 40,
    "code": 5002,
    "line": 41,
    "start": 4,
    "end": 39,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 41,
              "start": 42,
              "end": 57
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "__test_source",
                "on_all_flows": true
              }
            ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 41,
              "start": 4,
              "end": 39
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "class_flows.C.__class__.tainted_class_attribute",
                "on_all_flows": true
              }
            ]
          }
        ]
      }
    ],
    "features": [ { "always-via": "special_source" } ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable":
      "class_flows.tainted_class_attribute_through_optional_class_issue",
    "callable_line": 44,
    "code": 5002,
    "line": 48,
    "start": 8,
    "end": 44,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 48,
              "start": 47,
              "end": 62
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "__test_source",
                "on_all_flows": true
              }
            ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 48,
              "start": 8,
              "end": 44
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "class_flows.C.__class__.tainted_class_attribute",
                "on_all_flows": true
              }
            ]
          }
        ]
      }
    ],
    "features": [ { "always-via": "special_source" } ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable": "class_flows.global_class_attribute_issue",
    "callable_line": 51,
    "code": 5002,
    "line": 52,
    "start": 4,
    "end": 29,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 52,
              "start": 32,
              "end": 47
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "__test_source",
                "on_all_flows": true
              }
            ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 52,
              "start": 4,
              "end": 29
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "class_flows.C.__class__.tainted_class_attribute",
                "on_all_flows": true
              }
            ]
          }
        ]
      }
    ],
    "features": [ { "always-via": "special_source" } ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable": "class_flows.tainted_attribute_flow_issue",
    "callable_line": 16,
    "code": 5002,
    "line": 17,
    "start": 4,
    "end": 23,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 17,
              "start": 26,
              "end": 41
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "__test_source",
                "on_all_flows": true
              }
            ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 17,
              "start": 4,
              "end": 23
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "class_flows.C.tainted_attribute",
                "on_all_flows": true
              }
            ]
          }
        ]
      }
    ],
    "features": [ { "always-via": "special_source" } ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable": "class_flows.tainted_attribute_through_inheritance_issue",
    "callable_line": 28,
    "code": 5002,
    "line": 29,
    "start": 4,
    "end": 23,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 29,
              "start": 26,
              "end": 41
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "__test_source",
                "on_all_flows": true
              }
            ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 29,
              "start": 4,
              "end": 23
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "class_flows.C.tainted_attribute",
                "on_all_flows": true
              }
            ]
          }
        ]
      }
    ],
    "features": [ { "always-via": "special_source" } ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable": "class_flows.tainted_class_attribute_through_class_issue",
    "callable_line": 36,
    "code": 5002,
    "line": 37,
    "start": 4,
    "end": 40,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 37,
              "start": 43,
              "end": 58
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "__test_source",
                "on_all_flows": true
              }
            ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 37,
              "start": 4,
              "end": 40
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "class_flows.C.__class__.tainted_class_attribute",
                "on_all_flows": true
              }
            ]
          }
        ]
      }
    ],
    "features": [ { "always-via": "special_source" } ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable": "class_flows.test",
    "callable_line": 73,
    "code": 5002,
    "line": 74,
    "start": 63,
    "end": 78,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 74,
              "start": 63,
              "end": 78
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "__test_source",
                "on_all_flows": true
              }
            ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "call": {
              "position": {
                "filename": "class_flows.py",
                "line": 74,
                "start": 63,
                "end": 78
              },
              "resolves_to": [
                "class_flows.HasClassmethods._async_results_for_non_empty_query_from_db"
              ],
              "port": "formal(locale)",
              "length": 2
            },
            "leaves": [
              { "kind": "Test", "name": "__test_sink", "on_all_flows": true }
            ],
            "features": [ { "always-via": "special_sink" } ]
          }
        ]
      }
    ],
    "features": [
      { "always-via": "special_source" },
      { "always-via": "special_sink" }
    ]
  }
}
{
  "kind": "issue",
  "data": {
    "callable": "class_flows.test_decorated_classmethod",
    "callable_line": 84,
    "code": 5002,
    "line": 85,
    "start": 36,
    "end": 51,
    "filename": "class_flows.py",
    "message": "Data from [Test] source(s) may reach [Test] sink(s)",
    "traces": [
      {
        "name": "forward",
        "roots": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 85,
              "start": 36,
              "end": 51
            },
            "leaves": [
              {
                "kind": "Test",
                "name": "__test_source",
                "on_all_flows": true
              }
            ],
            "features": [ { "always-via": "special_source" } ]
          }
        ]
      },
      {
        "name": "backward",
        "roots": [
          {
            "call": {
              "position": {
                "filename": "class_flows.py",
                "line": 85,
                "start": 36,
                "end": 51
              },
              "resolves_to": [
                "class_flows.HasDecoratedClassmethod.to_sink"
              ],
              "port": "formal(x)",
              "length": 1
            },
            "leaves": [
              { "kind": "Test", "name": "__test_sink", "on_all_flows": true }
            ],
            "features": [ { "always-via": "special_sink" } ]
          }
        ]
      }
    ],
    "features": [
      { "always-via": "special_source" },
      { "always-via": "special_sink" }
    ]
  }
}
{
  "kind": "model",
  "data": {
    "callable":
      "class_flows.HasClassmethods._async_results_for_non_empty_query_from_db",
    "sources": [],
    "sinks": [
      {
        "port": "formal(locale)",
        "taint": [
          {
            "call": {
              "position": {
                "filename": "class_flows.py",
                "line": 61,
                "start": 49,
                "end": 55
              },
              "resolves_to": [
                "class_flows.HasClassmethods._get_multi_word_results"
              ],
              "port": "formal(locale)",
              "length": 1
            },
            "leaves": [
              { "kind": "Test", "name": "__test_sink", "on_all_flows": true }
            ],
            "features": [ { "always-via": "special_sink" } ]
          }
        ]
      }
    ],
    "tito": []
  }
}
{
  "kind": "model",
  "data": {
    "callable": "class_flows.HasClassmethods._get_multi_word_results",
    "sources": [],
    "sinks": [
      {
        "port": "formal(locale)",
        "taint": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 65,
              "start": 20,
              "end": 26
            },
            "leaves": [
              { "kind": "Test", "name": "__test_sink", "on_all_flows": true }
            ],
            "features": [ { "always-via": "special_sink" } ]
          }
        ]
      }
    ],
    "tito": []
  }
}
{
  "kind": "model",
  "data": {
    "callable": "class_flows.HasDecoratedClassmethod.to_sink",
    "sources": [],
    "sinks": [
      {
        "port": "formal(x)",
        "taint": [
          {
            "root": {
              "filename": "class_flows.py",
              "line": 81,
              "start": 20,
              "end": 21
            },
            "leaves": [
              { "kind": "Test", "name": "__test_sink", "on_all_flows": true }
            ],
            "features": [ { "always-via": "special_sink" } ]
          }
        ]
      }
    ],
    "tito": []
  }
}
