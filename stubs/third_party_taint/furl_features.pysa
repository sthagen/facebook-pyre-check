def furl.PathCompositionInterface.__setattr__(self, attr, value: TaintInTaintOut[Updates[self], Via[furl_path]]): ...
def furl.QueryCompositionInterface.__setattr__(self, attr, value: TaintInTaintOut[Updates[self], Via[furl_query_params]]): ...
def furl.FragmentCompositionInterface.__setattr__(self, attr, value: TaintInTaintOut[Updates[self], Via[furl_fragment]]): ...

def furl.omdict1D.add(self, key, value: TaintInTaintOut[Updates[self], Via[furl_query_params]]): ...
def furl.omdict1D.set(self, key, value: TaintInTaintOut[Updates[self], Via[furl_query_params]]): ...
def furl.omdict1D.__setitem__(self, key, value: TaintInTaintOut[LocalReturn, Via[furl_query_params]]): ...

def furl.furl.__init__(self, url: TaintInTaintOut[LocalReturn, Via[furl_url]], strict): ...
def furl.furl.load(
    self: TaintInTaintOut[LocalReturn],
    url: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_url]]
): ...
def furl.furl.add(
    self: TaintInTaintOut[LocalReturn],
    args: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_query_params]],
    path: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_path]],
    fragment_path: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_fragment]],
    fragment_args: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_fragment]],
    query_params: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_query_params]]
): ...
def furl.furl.set(
    self: TaintInTaintOut[LocalReturn],
    args: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_query_params]],
    path: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_path]],
    fragment: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_fragment]],
    scheme: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_scheme]],
    netloc: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_netloc]],
    origin: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_origin]],
    fragment_path: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_fragment]],
    fragment_args: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_fragment]],
    fragment_separator: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_fragment]],
    host: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_host]],
    port: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_port]],
    query: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_query_params]],
    query_params: TaintInTaintOut[LocalReturn, Updates[self], Via[furl_query_params]],
    username: TaintInTaintOut[LocalReturn, Updates[self]],
    password: TaintInTaintOut[LocalReturn, Updates[self]]
): ...

@scheme.setter
def furl.furl.scheme(self, scheme: TaintInTaintOut[LocalReturn, Via[furl_scheme]]): ...
@host.setter
def furl.furl.host(self, host: TaintInTaintOut[LocalReturn, Via[furl_host]]): ...
@port.setter
def furl.furl.port(self, port: TaintInTaintOut[LocalReturn, Via[furl_port]]): ...
@netloc.setter
def furl.furl.netloc(self, netloc: TaintInTaintOut[LocalReturn, Via[furl_netloc]]): ...
@origin.setter
def furl.furl.origin(self, origin: TaintInTaintOut[LocalReturn, Via[furl_origin]]): ...
@url.setter
def furl.furl.url(self, url: TaintInTaintOut[LocalReturn, Via[furl_url]]): ...
@query.setter
def furl.QueryCompositionInterface.query(self, query: TaintInTaintOut[LocalReturn, Via[furl_query_params]]): ...
@args.setter
def furl.QueryCompositionInterface.args(self, args: TaintInTaintOut[LocalReturn, Via[furl_query_params]]): ...
@path.setter
def furl.PathCompositionInterface.path(self, path: TaintInTaintOut[LocalReturn, Via[furl_path]]): ...
