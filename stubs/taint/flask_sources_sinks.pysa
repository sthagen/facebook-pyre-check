# flask.Request sources

werkzeug.wrappers.BaseRequest.args: TaintSource[UserControlled] = ...
werkzeug.wrappers.BaseRequest.method: TaintSource[UserControlled] = ...
werkzeug.wrappers.BaseRequest.form: TaintSource[UserControlled] = ...
werkzeug.wrappers.BaseRequest.values: TaintSource[UserControlled] = ...
werkzeug.wrappers.BaseRequest.files: TaintSource[UserControlled] = ...

werkzeug.wrappers.BaseRequest.headers: TaintSource[UserControlled] = ...
def werkzeug.datastructures.Headers.get(self, key, type = ...) -> TaintSource[UserControlled]: ...
def werkzeug.wrappers.CommonRequestDescriptorsMixin.content_type(self) -> TaintSource[UserControlled]: ...
def werkzeug.wrappers.CommonRequestDescriptorsMixin.referrer(self) -> TaintSource[UserControlled]: ...
def werkzeug.wrappers.UserAgentMixin.user_agent(self) -> TaintSource[UserControlled]: ...

@property
def werkzeug.wrappers.BaseRequest.data(self) -> TaintSource[UserControlled]: ...
def werkzeug.wrappers.BaseRequest.get_data(self, cache, as_text, parse_form_data = ...) -> TaintSource[UserControlled]: ...

werkzeug.wrappers.BaseRequest.path: TaintSource[UserControlled] = ...
werkzeug.wrappers.BaseRequest.full_path: TaintSource[UserControlled] = ...
werkzeug.wrappers.BaseRequest.url: TaintSource[UserControlled] = ...
werkzeug.wrappers.BaseRequest.base_url: TaintSource[UserControlled] = ...
werkzeug.wrappers.BaseRequest.query_string: TaintSource[UserControlled] = ...

# Sessions
flask.globals.session: TaintSource[UserControlled] = ...

# Sinks
def werkzeug.utils.redirect(location: TaintSink[Redirect], code=..., Response=...): ...
def flask.helpers.send_file(
    filename_or_fp: TaintSink[FileSystem_ReadWrite],
    mimetype=...,
    as_attachment=...,
    attachment_filename=...,
    add_etags=...,
    cache_timeout=...,
    conditional=...,
    last_modified=...,
): ...
def flask.helpers.make_response(*args: TaintSink[ReturnedToUser, XSS]): ...
