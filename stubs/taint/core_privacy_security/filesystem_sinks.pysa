# Filesystem Sinks
def open(file: TaintSink[FileSystem_ReadWrite, ViaValueOf[mode, WithTag["file-open-mode"]]], mode, buffering, encoding, errors, newline, closefd): ...
def os.open(path: TaintSink[FileSystem_ReadWrite, ViaValueOf[mode, WithTag["file-open-mode"]]], flags, mode, *, dir_fd): ...

def zipfile.ZipFile.__init__(self, file: TaintSink[FileSystem_ReadWrite, ViaValueOf[mode, WithTag["file-open-mode"]]], mode, compression, allowZip64): ...
def gzip.open(filename: TaintSink[FileSystem_ReadWrite, ViaValueOf[mode, WithTag["file-open-mode"]]], mode, compresslevel, encoding, errors, newline): ...
def gzip.GzipFile.__init__(self, filename: TaintSink[FileSystem_ReadWrite, ViaValueOf[mode, WithTag["file-open-mode"]]], mode, compresslevel, fileobj, mtime): ...
def bz2.open(filename: TaintSink[FileSystem_ReadWrite, ViaValueOf[mode, WithTag["file-open-mode"]]], mode, compresslevel, encoding, errors, newline): ...

def tarfile.TarFile.open(
    cls,
    name: TaintSink[FileSystem_ReadWrite, ViaValueOf[mode, WithTag["file-open-mode"]]],
    mode,
    fileobj,
    bufsize,
    format,
    tarinfo,
    dereference,
    ignore_zeros,
    encoding,
    errors,
    pax_headers,
    debug,
    errorlevel
): ...
# tarfile.TarFile
def tarfile.TarFile.__init__(
    self,
    name: TaintSink[FileSystem_ReadWrite, ViaValueOf[mode, WithTag["file-open-mode"]]],
    mode,
    format,
    tarinfo ,
    dereference,
    ignore_zeros,
    encoding,
    errors,
    pax_headers,
    debug,
    errorlevel,
    copybufsize
): ...


def urllib.request.urlretrieve(url, filename: TaintSink[FileSystem_ReadWrite], reporthook, data): ...

def pathlib.PurePath.__new__(cls, *args: TaintSink[FileSystem_ReadWrite]): ...
def pathlib.PurePath.__truediv__(self, key: TaintSink[FileSystem_ReadWrite]): ...
def pathlib.PurePath.__rtruediv__(self, key: TaintSink[FileSystem_ReadWrite]): ...
def pathlib.Path.__new__(cls, *args: TaintSink[FileSystem_ReadWrite], **kwargs): ...

def pathlib.Path.open(self: TaintSink[FileSystem_ReadWrite, ViaValueOf[mode, WithTag["file-open-mode"]]], mode, buffering, encoding, errors, newline): ...
def pathlib.Path.read_bytes(self: TaintSink[FileSystem_ReadWrite]): ...
def pathlib.Path.read_text(self: TaintSink[FileSystem_ReadWrite], encoding, errors): ...
def pathlib.Path.write_bytes(self: TaintSink[FileSystem_ReadWrite], data): ...
def pathlib.Path.write_text(self: TaintSink[FileSystem_ReadWrite], data, encoding, errors): ...
