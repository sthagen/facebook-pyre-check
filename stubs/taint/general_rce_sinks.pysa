# RCE sinks
def eval(__source: TaintSink[RemoteCodeExecution], __globals, __locals): ...
def exec(__object: TaintSink[RemoteCodeExecution], __globals, __locals): ...
def importlib.import_module(name: TaintSink[RemoteCodeExecution], package=...): ...
def __import__(
  name: TaintSink[RemoteCodeExecution],
  globals=...,
  locals=...,
  fromlist=...,
  level=...,
): ...
def pickle.loads(
  data: TaintSink[RemoteCodeExecution],
  *,
  fix_imports=...,
  encoding=...,
  errors=...,
  buffers=...,
): ...
def pickle.load(
    file: TaintSink[RemoteCodeExecution],
    *,
    fix_imports=...,
    encoding=...,
    errors=...,
    buffers=...,
  ): ...
def pickle.Unpickler.__init__(
    self,
    file: TaintSink[RemoteCodeExecution],
    fix_imports = ...,
    encoding = ...,
    errors = ...
): ...
def yaml.load(
  stream: TaintSink[RemoteCodeExecution],
  Loader=...,
): ...
def yaml.load_all(stream: TaintSink[RemoteCodeExecution], Loader=...): ...
# Subprocess
def subprocess.run(
    args: TaintSink[RemoteCodeExecution],
    bufsize: TaintSink[RemoteCodeExecution],
    executable: TaintSink[RemoteCodeExecution],
    stdin,
    stdout,
    stderr,
    preexec_fn: TaintSink[RemoteCodeExecution],
    close_fds: TaintSink[RemoteCodeExecution],
    shell: TaintSink[RemoteCodeExecution],
    cwd: TaintSink[RemoteCodeExecution],
    env: TaintSink[RemoteCodeExecution],
    universal_newlines,
    startupinfo,
    creationflags,
    restore_signals,
    start_new_session,
    pass_fds,
    *,
    capture_output,
    check,
    encoding,
    errors,
    input: TaintSink[RemoteCodeExecution],
    text,
    timeout: TaintSink[RemoteCodeExecution],
): ...

def subprocess.call(
  args: TaintSink[RemoteCodeExecution],
  bufsize: TaintSink[RemoteCodeExecution],
  executable: TaintSink[RemoteCodeExecution],
  stdin,
  stdout,
  stderr,
  preexec_fn: TaintSink[RemoteCodeExecution],
  close_fds: TaintSink[RemoteCodeExecution],
  shell: TaintSink[RemoteCodeExecution],
  cwd: TaintSink[RemoteCodeExecution],
  env: TaintSink[RemoteCodeExecution],
  universal_newlines,
  startupinfo,
  creationflags,
  restore_signals,
  start_new_session,
  pass_fds,
  timeout: TaintSink[RemoteCodeExecution],
): ...

def subprocess.check_call(
  args: TaintSink[RemoteCodeExecution],
  bufsize: TaintSink[RemoteCodeExecution],
  executable: TaintSink[RemoteCodeExecution],
  stdin,
  stdout,
  stderr,
  preexec_fn: TaintSink[RemoteCodeExecution],
  close_fds: TaintSink[RemoteCodeExecution],
  shell: TaintSink[RemoteCodeExecution],
  cwd: TaintSink[RemoteCodeExecution],
  env: TaintSink[RemoteCodeExecution],
  universal_newlines,
  startupinfo,
  creationflags,
  restore_signals,
  start_new_session,
  pass_fds,
  timeout: TaintSink[RemoteCodeExecution],
): ...

def subprocess.check_output(
  args: TaintSink[RemoteCodeExecution],
  bufsize: TaintSink[RemoteCodeExecution],
  executable: TaintSink[RemoteCodeExecution],
  stdin,
  stderr,
  preexec_fn: TaintSink[RemoteCodeExecution],
  close_fds: TaintSink[RemoteCodeExecution],
  shell: TaintSink[RemoteCodeExecution],
  cwd: TaintSink[RemoteCodeExecution],
  env: TaintSink[RemoteCodeExecution],
  universal_newlines,
  startupinfo,
  creationflags,
  restore_signals,
  start_new_session,
  pass_fds,
  *,
  timeout: TaintSink[RemoteCodeExecution],
  input: TaintSink[RemoteCodeExecution],
  encoding,
  errors,
  text,
 ): ...

def subprocess.getstatusoutput(cmd: TaintSink[RemoteCodeExecution]): ...

def subprocess.getoutput(cmd: TaintSink[RemoteCodeExecution]): ...

def subprocess.Popen.__new__(self, args: TaintSink[RemoteCodeExecution], bufsize, executable: TaintSink[RemoteCodeExecution],
                 stdin, stdout, stderr,
                 preexec_fn: TaintSink[RemoteCodeExecution], close_fds,
                 shell: TaintSink[RemoteCodeExecution], cwd: TaintSink[RemoteCodeExecution], env: TaintSink[RemoteCodeExecution], universal_newlines,
                 startupinfo, creationflags,
                 restore_signals, start_new_session,
                 pass_fds, *, encoding, errors): ...

# os module
def os.execl(file: TaintSink[RemoteCodeExecution], __arg0, *args: TaintSink[RemoteCodeExecution]): ...
def os.execle(file: TaintSink[RemoteCodeExecution], __arg0, *args): ...
def os.execlp(file: TaintSink[RemoteCodeExecution], __arg0, *args): ...
def os.execlpe(file: TaintSink[RemoteCodeExecution], __arg0,*args): ...
def os.execv(__path: TaintSink[RemoteCodeExecution], __argv: TaintSink[RemoteCodeExecution]): ...
def os.execve(path: TaintSink[RemoteCodeExecution], argv: TaintSink[RemoteCodeExecution], env): ...
def os.execvp(file: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution]): ...
def os.execvpe(file: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution], env): ...
def os.popen(cmd: TaintSink[RemoteCodeExecution], mode=..., buffering=...):...
def os.spawnl(mode, file: TaintSink[RemoteCodeExecution], arg0, *args: TaintSink[RemoteCodeExecution]): ...
def os.spawnle(mode, file: TaintSink[RemoteCodeExecution], arg0, *args: TaintSink[RemoteCodeExecution], env: TaintSink[RemoteCodeExecution]): ...
def os.spawnlp(mode, file: TaintSink[RemoteCodeExecution], arg0, *args: TaintSink[RemoteCodeExecution]): ...
def os.spawnlpe(mode, file: TaintSink[RemoteCodeExecution], arg0, *args: TaintSink[RemoteCodeExecution]): ...
def os.spawnv(mode, file: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution]): ...
def os.spawnve(mode, file: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution], env: TaintSink[RemoteCodeExecution]): ...
def os.spawnvp(mode, file: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution]): ...
def os.system(command: TaintSink[RemoteCodeExecution]): ...

# marshaling
def marshal.loads(__bytes: TaintSink[RemoteCodeExecution]): ...
def marshal.load(__file: TaintSink[FileSystem]): ...

# shelve library https://docs.python.org/3/library/shelve.html
def shelve.open(filename: TaintSink[RemoteCodeExecution], flag=..., protocol=..., writeback=...): ...
