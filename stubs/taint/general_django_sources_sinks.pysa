# HttpRequest sources

django.http.request.HttpRequest.COOKIES: TaintSource[UserControlled] = ...
django.http.request.HttpRequest.FILES: TaintSource[UserControlled, Via[request_files]] = ...
django.http.request.HttpRequest.GET: TaintSource[UserControlled] = ...
django.http.request.HttpRequest.META: TaintSource[UserControlled] = ...
django.http.request.HttpRequest.POST: TaintSource[UserControlled] = ...
django.http.request.HttpRequest.REQUEST: TaintSource[UserControlled] = ...
django.http.request.HttpRequest.body: TaintSource[UserControlled] = ...
django.http.request.HttpRequest.signed_body: TaintSource[UserControlled] = ...
django.http.request.HttpRequest.user_agent_string: TaintSource[UserControlled] = ...
django.http.request.HttpRequest.user_agent: TaintSource[UserControlled] = ...

django.http.request.HttpRequest.COOKIES: TaintSource[Cookies] = ...
def django.http.request.HttpRequest.get_signed_cookie(self, key, default=..., salt=..., max_age=...) -> TaintSource[Cookies]: ...


django.http.request.HttpRequest.GET: TaintSource[UserData] = ...
django.http.request.HttpRequest.POST: TaintSource[UserData] = ...
django.http.request.HttpRequest.body: TaintSource[UserData] = ...
django.http.request.HttpRequest.signed_body: TaintSource[UserData] = ...


django.http.request.HttpRequest.META: TaintSource[HeaderData] = ...
def django.http.request.HttpRequest.__repr__(self) -> TaintSource[HeaderData]: ...
django.core.handlers.wsgi.WSGIRequest.environ: TaintSource[HeaderData]
def django.http.request.build_request_repr(
  request, path_override=...,
  GET_override=...,
  POST_override=...,
  COOKIES_override=...,
  META_override=...
) -> TaintSource[HeaderData]: ...

def django.http.request.HttpRequest.get_full_path(self) -> TaintSource[URL]: ...
def django.http.request.HttpRequest.build_absolute_uri(self, location = ...) -> TaintSource[URL]: ...


# HttpResponse sinks

def django.http.response.HttpResponse.__init__(
    self,
    content = ...,
    *args,
    *,
    content_type: TaintSink[ResponseHeaderValue] = ...,
    **kwargs,
): ...

def django.http.response.HttpResponse.__init__(
    self,
    content: TaintSink[ReturnedToUser] = ...,
    *args: TaintSink[ReturnedToUser],
    **kwargs: TaintSink[ReturnedToUser],
): ...

def django.http.response.HttpResponse.__setitem__(self, header: TaintSink[ResponseHeaderName], value: TaintSink[ResponseHeaderValue, ViaValueOf[header]]): ...
def django.http.response.HttpResponse.setdefault(self, header: TaintSink[ResponseHeaderName], value: TaintSink[ResponseHeaderValue, ViaValueOf[header]]): ...

def django.http.response.HttpResponseRedirect.__init__(self, redirect_to: TaintSink[Redirect], *args, **kwargs): ...

def django.shortcuts.redirect(to: TaintSink[Redirect], *args, **kwargs): ...

# Caching

def django.core.cache.backends.base.BaseCache.get(self, key, default=..., version=...) -> TaintSource[MemCache]: ...
def django.core.cache.backends.base.BaseCache.get_many(self, keys, version=...) -> TaintSource[MemCache]: ...
def django.core.cache.backends.base.BaseCache.set(self, key, value: TaintSink[MemcacheSink], timeout, version): ...
def django.core.cache.backends.base.BaseCache.set_many(self, data: TaintSink[MemcacheSink], timeout, version): ...

# Logging

def django.core.mail.send_mail(
  subject: TaintSink[Logging],
  message: TaintSink[Logging],
  from_email,
  recipient_list,
  fail_silently=...,
  auth_user=...,
  auth_password=...,
  connection=...,
  html_message: TaintSink[Logging]=...
): ...

# SQL

# See: https://docs.djangoproject.com/en/2.2/topics/db/sql/#executing-raw-queries
def django.db.models.manager.Manager.raw(self, raw_query: TaintSink[SQL], params=..., translations=..., using=...): ...

# See: https://docs.djangoproject.com/en/2.2/topics/db/sql/#executing-custom-sql
def django.db.backends.utils.CursorWrapper.execute(self, sql: TaintSink[SQL], params=...): ...
def django.db.backends.utils.CursorWrapper.executemany(self, sql: TaintSink[SQL], param_list): ...
def django.db.backends.mysql.base.CursorWrapper.execute(self, query: TaintSink[SQL], args=...): ...
def django.db.backends.mysql.base.CursorWrapper.executemany(self, query: TaintSink[SQL], args): ...

# These are all other sources of raw SQL queries in django, which should be
# added at some point

# See: https://docs.djangoproject.com/en/2.2/ref/models/querysets/#django.db.models.query.QuerySet.extra
# def django.db.models.query.QuerySet.extra(select: TaintSink[SQL]=..., where: TaintSink[SQL]=..., params=..., tables: TaintSink[SQL]=..., order_by: TaintSink[SQL]=..., select_params=...): ...

# See: https://docs.djangoproject.com/en/2.2/ref/models/expressions/#django.db.models.expressions.RawSQL
# def django.db.models.expressions.RawSQL.__init__(self, sql: TaintSink[SQL], params, output_field=...): ...

# XSS

def django.utils.html.format_html(format_string: TaintSink[XSS], *args, **kwargs): ...
def django.utils.html.format_html_join(sep, format_string: TaintSink[XSS], args_generator): ...

# This could be an interesting sink, because it introduces the possibility of
# XSS. It tends to be noisy, however, because it's only used in situations where
# developers believe they've already accounted for and prevented XSS.
# def django.utils.safestring.mark_safe(s: TaintSink[XSS]): ...

django.http.response.HttpResponse.content: TaintSink[XSS] = ...
# This is a sink with the right content type, but it's way too noisy to triage:
# def django.http.response.HttpResponse.__init__(self, content: TaintSink[XSS]=..., *args, **kwargs): ...

def django.utils.html.escape(text: TaintInTaintOut[Via[escape_html]]): ...
def django.utils.html.conditional_escape(text: TaintInTaintOut[Via[escape_html]]): ...
