# Dictionary propagation
@SkipObscure
def typing.MutableMapping.setdefault(self, __key: TaintInTaintOut[Updates[self]], __default: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def typing.MutableMapping.update(self, __m: TaintInTaintOut[Updates[self]], **kwargs): ...
@SkipObscure
def typing.MutableMapping.__setitem__(self, __k: TaintInTaintOut[LocalReturn], __v: TaintInTaintOut[LocalReturn]): ...

@SkipObscure
def dict.__getitem__(self: TaintInTaintOut[LocalReturn], __k): ...
@SkipObscure
def typing.Mapping.get(self: TaintInTaintOut[LocalReturn], __key, default): ...

# List propagation
@SkipObscure
def list.extend(self, __iterable: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def list.append(self, __object: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def list.insert(self, __index, __object: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def list.__setitem__(self, __s: TaintInTaintOut[LocalReturn], __o): ...
@SkipObscure
def list.__iadd__(self: TaintInTaintOut[LocalReturn], __x: TaintInTaintOut[LocalReturn, Updates[self]]): ...
@SkipObscure
def list.__imul__(self: TaintInTaintOut[LocalReturn], __n: TaintInTaintOut[LocalReturn, Updates[self]]): ...
@SkipObscure
def typing.MutableSequence.insert(self, index, value: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def typing.MutableSequence.__setitem__(self, index, value: TaintInTaintOut[LocalReturn]): ...
@SkipObscure
def typing.MutableSequence.append(self, value: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def typing.MutableSequence.extend(self, values: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def typing.MutableSequence.__iadd__(self: TaintInTaintOut[LocalReturn], values: TaintInTaintOut[LocalReturn, Updates[self]]): ...

@SkipObscure
def list.__getitem__(self: TaintInTaintOut[LocalReturn], __s): ...

# Set propagation
@SkipObscure
def set.add(self, __element: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def set.difference_update(self, *s: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def set.intersection_update(self, *s: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def set.update(self, *s: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def set.__iand__(self: TaintInTaintOut[LocalReturn], __s: TaintInTaintOut[LocalReturn, Updates[self]]): ...
@SkipObscure
def set.__ior__(self: TaintInTaintOut[LocalReturn], __s: TaintInTaintOut[LocalReturn, Updates[self]]): ...
@SkipObscure
def set.__isub__(self: TaintInTaintOut[LocalReturn], __s: TaintInTaintOut[LocalReturn, Updates[self]]): ...
@SkipObscure
def set.__ixor__(self: TaintInTaintOut[LocalReturn], __s: TaintInTaintOut[LocalReturn, Updates[self]]): ...
@SkipObscure
def typing.MutableSet.add(self, value: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def typing.MutableSet.__ior__(self: TaintInTaintOut[LocalReturn], it: TaintInTaintOut[LocalReturn, Updates[self]]): ...
@SkipObscure
def typing.MutableSet.__iand__(self: TaintInTaintOut[LocalReturn], it: TaintInTaintOut[LocalReturn, Updates[self]]): ...
@SkipObscure
def typing.MutableSet.__ixor__(self: TaintInTaintOut[LocalReturn], it: TaintInTaintOut[LocalReturn, Updates[self]]): ...
@SkipObscure
def typing.MutableSet.__isub__(self: TaintInTaintOut[LocalReturn], it: TaintInTaintOut[LocalReturn, Updates[self]]): ...

# Deque propagation

@SkipObscure
def collections.deque.append(self, __x: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def collections.deque.appendleft(self, __x: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def collections.deque.extend(self, __iterable: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def collections.deque.extendleft(self, __iterable: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def collections.deque.insert(self, __i, __x: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def collections.deque.__setitem__(self, __s, __o: TaintInTaintOut[LocalReturn]): ...
@SkipObscure
def collections.deque.__iadd__(self: TaintInTaintOut[LocalReturn], __iterable: TaintInTaintOut[LocalReturn, Updates[self]]): ...
@SkipObscure
def collections.deque.__imul__(self: TaintInTaintOut[LocalReturn], __other: TaintInTaintOut[LocalReturn, Updates[self]]): ...

# Queue propagation
@SkipObscure
def queue.Queue.put(item: TaintInTaintOut[Updates[self]]): ...
@SkipObscure
def queue.Queue.get(self: TaintInTaintOut[LocalReturn]): ...

# Container iteration
@SkipObscure
def list.__iter__(self: TaintInTaintOut[LocalReturn]): ...
@SkipObscure
def dict.__iter__(self: TaintInTaintOut[LocalReturn]): ...
@SkipObscure
def set.__iter__(self: TaintInTaintOut[LocalReturn]): ...
