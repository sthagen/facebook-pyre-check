# Dictionary propagation
def dict.__getitem__(self: TaintInTaintOut[LocalReturn], k): ...
def dict.update(self, __m: TaintInTaintOut[Updates[self]]): ...
def dict.get(self: TaintInTaintOut[LocalReturn], key, default = ...): ...

# List propagation
def list.extend(self, iterable: TaintInTaintOut[Updates[self]]): ...
def list.append(self, object: TaintInTaintOut[Updates[self]]): ...
def list.insert(self, index, object: TaintInTaintOut[Updates[self]]): ...

# Set propagation
def set.add(self, element: TaintInTaintOut[Updates[self]]): ...
def set.difference_update(self, *s: TaintInTaintOut[Updates[self]]): ...
def set.intersection_update(self, *s: TaintInTaintOut[Updates[self]]): ...
def set.update(self, *s: TaintInTaintOut[Updates[self]]): ...

# String features
def str.__add__(self: TaintInTaintOut[LocalReturn, Via[string_concat_lhs]], s: TaintInTaintOut[Via[string_concat_rhs]]): ...

# XML sinks
def xml.etree.ElementTree.parse(source: TaintSink[XMLParser], parser=...): ...
def xml.etree.ElementTree.iterparse(source: TaintSink[XMLParser], events=..., parser=...): ...
def xml.etree.ElementTree.XML(text: TaintSink[XMLParser], parser=...): ...
def xml.etree.ElementTree.XMLParser.feed(self, data: TaintSink[XMLParser]): ...

# GetAttr
def getattr(
    __o: TaintInTaintOut[Via[getattr]],
    name: TaintSink[GetAttr],
    __default: TaintInTaintOut[LocalReturn] = ...,
): ...

def io.BytesIO.__init__(self, initial_bytes: TaintInTaintOut[Via[bytesio]]): ...

def len(__s: TaintInTaintOut[Via[len]]): ...

def hmac.new(key: TaintInTaintOut[Via[hmac_key]], msg = ..., digestmod = ...): ...

def bool.__init__(self, o: TaintInTaintOut[Via[boolean]]): ...

def urllib.parse.quote_plus(string: TaintInTaintOut[LocalReturn, Via[urllib_quote_plus]], safe, encoding, errors): ...
