--- /home/pradeepkumars/unpatched_typeshed/python-typeshed-8aedbda/stdlib/builtins.pyi	2023-02-28 08:50:55.000000000 -0800
+++ stubs/typeshed/typeshed/stdlib/builtins.pyi	2023-06-22 15:45:01.675267578 -0700
@@ -55,6 +55,7 @@
     type_check_only,
 )
 from typing_extensions import Literal, LiteralString, Self, SupportsIndex, TypeAlias, TypeGuard, final
+from pyre_extensions import Add, Multiply, Divide, ReadOnly
 
 if sys.version_info >= (3, 9):
     from types import GenericAlias
@@ -75,6 +76,8 @@
 _SupportsAnextT = TypeVar("_SupportsAnextT", bound=SupportsAnext[Any], covariant=True)
 _AwaitableT = TypeVar("_AwaitableT", bound=Awaitable[Any])
 _AwaitableT_co = TypeVar("_AwaitableT_co", bound=Awaitable[Any], covariant=True)
+N1 = TypeVar("N1", bound=int)
+N2 = TypeVar("N2", bound=int)
 
 class object:
     __doc__: str | None
@@ -92,10 +95,10 @@
     # Overriding them in subclasses has different semantics, even if the override has an identical signature.
     def __setattr__(self, __name: str, __value: Any) -> None: ...
     def __delattr__(self, __name: str) -> None: ...
-    def __eq__(self, __o: object) -> bool: ...
+    def __eq__(self: ReadOnly[Self], __o: ReadOnly[object]) -> bool: ...
     def __ne__(self, __o: object) -> bool: ...
     def __str__(self) -> str: ...  # noqa: Y029
-    def __repr__(self) -> str: ...  # noqa: Y029
+    def __repr__(self: ReadOnly[Self]) -> str: ...  # noqa: Y029
     def __hash__(self) -> int: ...
     def __format__(self, __format_spec: str) -> str: ...
     def __getattribute__(self, __name: str) -> Any: ...
@@ -242,10 +245,10 @@
             signed: bool = False,
         ) -> Self: ...
 
-    def __add__(self, __x: int) -> int: ...
-    def __sub__(self, __x: int) -> int: ...
-    def __mul__(self, __x: int) -> int: ...
-    def __floordiv__(self, __x: int) -> int: ...
+    def __add__(self: N1, __x: N2) -> Add[N1, N2]: ...
+    def __sub__(self: N1, __x: N2) -> Add[N1, Multiply[Literal[-1], N2]]: ...
+    def __mul__(self: N1, __x: N2) -> Multiply[N1, N2]: ...
+    def __floordiv__(self: N1, __x: N2) -> Divide[N1, N2]: ...
     def __truediv__(self, __x: int) -> float: ...
     def __mod__(self, __x: int) -> int: ...
     def __divmod__(self, __x: int) -> tuple[int, int]: ...
@@ -350,7 +353,7 @@
     def __round__(self, __ndigits: None = None) -> int: ...
     @overload
     def __round__(self, __ndigits: SupportsIndex) -> float: ...
-    def __eq__(self, __x: object) -> bool: ...
+    def __eq__(self: ReadOnly[Self], __x: ReadOnly[object]) -> bool: ...
     def __ne__(self, __x: object) -> bool: ...
     def __lt__(self, __x: float) -> bool: ...
     def __le__(self, __x: float) -> bool: ...
@@ -454,7 +457,7 @@
     def isalpha(self) -> bool: ...
     def isascii(self) -> bool: ...
     def isdecimal(self) -> bool: ...
-    def isdigit(self) -> bool: ...
+    def isdigit(self: ReadOnly[Self]) -> bool: ...
     def isidentifier(self) -> bool: ...
     def islower(self) -> bool: ...
     def isnumeric(self) -> bool: ...
@@ -473,7 +476,7 @@
     @overload
     def lower(self: LiteralString) -> LiteralString: ...
     @overload
-    def lower(self) -> str: ...  # type: ignore[misc]
+    def lower(self: ReadOnly[Self]) -> str: ...  # type: ignore[misc]
     @overload
     def lstrip(self: LiteralString, __chars: LiteralString | None = None) -> LiteralString: ...
     @overload
@@ -563,9 +566,9 @@
     def __add__(self, __s: str) -> str: ...  # type: ignore[misc]
     # Incompatible with Sequence.__contains__
     def __contains__(self, __o: str) -> bool: ...  # type: ignore[override]
-    def __eq__(self, __x: object) -> bool: ...
+    def __eq__(self: ReadOnly[Self], __x: Readonly[object]) -> bool: ...
     def __ge__(self, __x: str) -> bool: ...
-    def __getitem__(self, __i: SupportsIndex | slice) -> str: ...
+    def __getitem__(self: ReadOnly[Self], __i: SupportsIndex | slice) -> str: ...
     def __gt__(self, __x: str) -> bool: ...
     @overload
     def __iter__(self: LiteralString) -> Iterator[LiteralString]: ...
@@ -987,13 +990,20 @@
     @overload
     def sort(self, *, key: Callable[[_T], SupportsRichComparison], reverse: bool = False) -> None: ...
     def __len__(self) -> int: ...
+    @overload
     def __iter__(self) -> Iterator[_T]: ...
+    @overload
+    def __iter__(self: ReadOnly[Self]) -> Iterator[ReadOnly[_T]]: ...
     __hash__: ClassVar[None]  # type: ignore[assignment]
     @overload
     def __getitem__(self, __i: SupportsIndex) -> _T: ...
     @overload
     def __getitem__(self, __s: slice) -> list[_T]: ...
     @overload
+    def __getitem__(self: ReadOnly[Self], __i: SupportsIndex) -> ReadOnly[_T]: ...
+    @overload
+    def __getitem__(self: ReadOnly[Self], __s: slice) -> list[ReadOnly[_T]]: ...
+    @overload
     def __setitem__(self, __i: SupportsIndex, __o: _T) -> None: ...
     @overload
     def __setitem__(self, __s: slice, __o: Iterable[_T]) -> None: ...
@@ -1037,7 +1047,10 @@
     def __init__(self: dict[str, str], __iterable: Iterable[list[str]]) -> None: ...
     def __new__(cls, *args: Any, **kwargs: Any) -> Self: ...
     def copy(self) -> dict[_KT, _VT]: ...
+    @overload
     def keys(self) -> dict_keys[_KT, _VT]: ...
+    @overload
+    def keys(self: ReadOnly[Self]) -> ReadOnly[dict_keys[_KT, _VT]]: ...
     def values(self) -> dict_values[_KT, _VT]: ...
     def items(self) -> dict_items[_KT, _VT]: ...
     # Signature of `dict.fromkeys` should be kept identical to `fromkeys` methods of `OrderedDict`/`ChainMap`/`UserDict` in `collections`
@@ -1055,14 +1068,24 @@
     @overload
     def get(self, __key: _KT, __default: _VT | _T) -> _VT | _T: ...
     @overload
+    def get(self: ReadOnly[Self], __key: _KT) -> ReadOnly[_VT | None]: ...
+    @overload
+    def get(self: ReadOnly[Self], __key: _KT, __default: _VT | _T) -> ReadOnly[_VT | _T]: ...
+    @overload
     def pop(self, __key: _KT) -> _VT: ...
     @overload
     def pop(self, __key: _KT, __default: _VT | _T) -> _VT | _T: ...
     def __len__(self) -> int: ...
+    @overload
     def __getitem__(self, __key: _KT) -> _VT: ...
+    @overload
+    def __getitem__(self: ReadOnly[Self], __key: ReadOnly[_KT]) -> ReadOnly[_VT]: ...
     def __setitem__(self, __key: _KT, __value: _VT) -> None: ...
     def __delitem__(self, __key: _KT) -> None: ...
+    @overload
     def __iter__(self) -> Iterator[_KT]: ...
+    @overload
+    def __iter__(self: ReadOnly[dict[_KT, _VT]]) -> Iterator[ReadOnly[_KT]]: ...
     if sys.version_info >= (3, 8):
         def __reversed__(self) -> Iterator[_KT]: ...
     __hash__: ClassVar[None]  # type: ignore[assignment]
@@ -1097,13 +1120,16 @@
     def union(self, *s: Iterable[_S]) -> set[_T | _S]: ...
     def update(self, *s: Iterable[_T]) -> None: ...
     def __len__(self) -> int: ...
-    def __contains__(self, __o: object) -> bool: ...
+    def __contains__(self, __o: ReadOnly[object]) -> bool: ...
     def __iter__(self) -> Iterator[_T]: ...
     def __and__(self, __s: AbstractSet[object]) -> set[_T]: ...
     def __iand__(self, __s: AbstractSet[object]) -> Self: ...
     def __or__(self, __s: AbstractSet[_S]) -> set[_T | _S]: ...
     def __ior__(self, __s: AbstractSet[_T]) -> Self: ...  # type: ignore[override,misc]
-    def __sub__(self, __s: AbstractSet[_T | None]) -> set[_T]: ...
+    @overload
+    def __sub__(self, __s: ReadOnly[AbstractSet[_T | None]]) -> set[_T]: ...
+    @overload
+    def __sub__(self: ReadOnly[Self], __s: ReadOnly[AbstractSet[_T | None]]) -> ReadOnly[set[_T]]: ...
     def __isub__(self, __s: AbstractSet[object]) -> Self: ...
     def __xor__(self, __s: AbstractSet[_S]) -> set[_T | _S]: ...
     def __ixor__(self, __s: AbstractSet[_T]) -> Self: ...  # type: ignore[override,misc]
@@ -1377,7 +1403,7 @@
 @overload
 def getattr(__o: object, __name: str, __default: _T) -> Any | _T: ...
 def globals() -> dict[str, Any]: ...
-def hasattr(__obj: object, __name: str) -> bool: ...
+def hasattr(__obj: ReadOnly[object], __name: str) -> bool: ...
 def hash(__obj: object) -> int: ...
 def help(request: object = ...) -> None: ...
 def hex(__number: int | SupportsIndex) -> str: ...
@@ -1404,7 +1430,7 @@
 
 def isinstance(__obj: object, __class_or_tuple: _ClassInfo) -> bool: ...
 def issubclass(__cls: type, __class_or_tuple: _ClassInfo) -> bool: ...
-def len(__obj: Sized) -> int: ...
+def len(__obj: ReadOnly[Sized]) -> int: ...
 def license() -> None: ...
 def locals() -> dict[str, Any]: ...
 
@@ -1711,10 +1737,10 @@
 def setattr(__obj: object, __name: str, __value: Any) -> None: ...
 @overload
 def sorted(
-    __iterable: Iterable[SupportsRichComparisonT], *, key: None = None, reverse: bool = False
+    __iterable: ReadOnly[Iterable[SupportsRichComparisonT]], *, key: None = None, reverse: bool = False
 ) -> list[SupportsRichComparisonT]: ...
 @overload
-def sorted(__iterable: Iterable[_T], *, key: Callable[[_T], SupportsRichComparison], reverse: bool = False) -> list[_T]: ...
+def sorted(__iterable: ReadOnly[Iterable[_T]], *, key: Callable[[_T], SupportsRichComparison], reverse: bool = False) -> list[_T]: ...
 
 _AddableT1 = TypeVar("_AddableT1", bound=SupportsAdd[Any, Any])
 _AddableT2 = TypeVar("_AddableT2", bound=SupportsAdd[Any, Any])
@@ -1865,6 +1891,11 @@
         __notes__: list[str]
         def add_note(self, __note: str) -> None: ...
 
+    # Define `__str__` and `__repr__` explicitly so pysa can mark them as sources.
+    def __str__(self) -> str: ...  # noqa: Y029
+    def __repr__(self) -> str: ...  # noqa: Y029
+
+
 class GeneratorExit(BaseException): ...
 class KeyboardInterrupt(BaseException): ...
 
