--- /home/pradeepkumars/unpatched_typeshed/python-typeshed-8aedbda/stdlib/typing.pyi	2023-02-28 08:50:55.000000000 -0800
+++ stubs/typeshed/typeshed/stdlib/typing.pyi	2023-05-19 14:49:22.441549466 -0700
@@ -18,7 +18,8 @@
     TracebackType,
     WrapperDescriptorType,
 )
-from typing_extensions import Never as _Never, ParamSpec as _ParamSpec, final as _final
+from typing_extensions import Never as _Never, ParamSpec as _ParamSpec, final as _final, Self
+from pyre_extensions import ReadOnly
 
 if sys.version_info >= (3, 10):
     from types import UnionType
@@ -127,7 +128,14 @@
     ]
 
 ContextManager = AbstractContextManager
-AsyncContextManager = AbstractAsyncContextManager
+
+@runtime_checkable
+class AsyncContextManager(Protocol[_T_co]):
+    async def __aenter__(self) -> _T_co: ...
+    @abstractmethod
+    async def __aexit__(
+        self, __exc_type: Type[BaseException] | None, __exc_value: BaseException | None, __traceback: TracebackType | None
+    ) -> bool | None: ...
 
 # This itself is only available during type checking
 def type_check_only(func_or_cls: _F) -> _F: ...
@@ -471,11 +479,20 @@
     @overload
     @abstractmethod
     def __getitem__(self, index: slice) -> Sequence[_T_co]: ...
+    @overload
+    @abstractmethod
+    def __getitem__(self: ReadOnly[Self], __i: SupportsIndex) -> ReadOnly[_T_co]: ...
+    @overload
+    @abstractmethod
+    def __getitem__(self: ReadOnly[Self], __s: slice) -> ReadOnly[Self]: ...
     # Mixin methods
     def index(self, value: Any, start: int = 0, stop: int = ...) -> int: ...
     def count(self, value: Any) -> int: ...
     def __contains__(self, value: object) -> bool: ...
+    @overload
     def __iter__(self) -> Iterator[_T_co]: ...
+    @overload
+    def __iter__(self: ReadOnly[Self]) -> Iterator[ReadOnly[_T_co]]: ...
     def __reversed__(self) -> Iterator[_T_co]: ...
 
 class MutableSequence(Sequence[_T], Generic[_T]):
@@ -590,6 +607,10 @@
     def get(self, __key: _KT) -> _VT_co | None: ...
     @overload
     def get(self, __key: _KT, default: _VT_co | _T) -> _VT_co | _T: ...
+    @overload
+    def get(self: ReadOnly[Self], __key: _KT) -> ReadOnly[_VT_co | None]: ...
+    @overload
+    def get(self: ReadOnly[Self], __key: _KT, default: _VT_co | _T) -> ReadOnly[_VT_co | _T]: ...
     def items(self) -> ItemsView[_KT, _VT_co]: ...
     def keys(self) -> KeysView[_KT]: ...
     def values(self) -> ValuesView[_VT_co]: ...
